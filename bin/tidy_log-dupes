#!/bin/bash
set -u  # "-u" (error when using uninitialised variables).
# Must not use "-f" (disable pathname expansion) in this script.
# Ultimately decided against "-e", because this script better runs through,
# despite minor errors; the same applies to "-C" (no-clobber / -overwrite).
set -o pipefail  # May not be supported, busybox's ash and bash do.
# Using bash (formally) because it is "always there" on SailfishOS: Either the
# real bash 3.2.57 (the last GPLv2 version) on SailfishOS less than v4 or via
# busybox's bash-symlink (which is deployed by the busybox-symlinks-bash RPM)
# since SailfishOS 4.  Note that busybox's ash support "-o pipefail", but not
# "-o posix"; setting POSIXLY_CORRECT seems to achive the same without
# compatibility issues, plus (when exported) also for a number of other GNU
# utilities.
# Nevertheless, this script is still a Bourne (not-"Again") Shell script and
# shall stay free of bashisms.
export LC_ALL=POSIX  # For details see https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html#tag_08_02
export POSIXLY_CORRECT=1  # Can have side-effects, see e.g., https://github.com/Olf0/sfos-upgrade/issues/73
                          # Ultimately this ensures an almost consistent behaviour across shell implementations.

# Usage
# See first code block below, especially the help output.

# Exit codes
# 0       : Everything went fine
# 1 - 119 : Failed to tidy or delete N extant logfiles
# 120     : Failed to tidy or delete 120 or more extant logfiles
# 121     : Not a single logfile to tidy found
# 123     : Log directory is not accessible
# 124     : Error parsing parameters
# 126     : Help called

called="${0##*/}"
retc=0
if [ -z "$*" ]
then logdir=/var/log
else
  logdir="$1"
  shift
  if [ "$logdir" = "-?" ] || [ "$logdir" = --help ]
  then retc=126
  elif [ ! -d "$logdir" ]
  then
    printf '%s\n' "$logdir is not a directory!" >&2
    retc=123
  fi
  if [ -n "$*" ]
  then
    printf '%s\n' "No extra parameters expected, but set: $*" >&2
    retc=124
  fi
  if [ $retc != 0 ]
  then
    printf '%s\n' "Usage: $called [<logdirectory>|-?|--help]"
    printf '%s\n' "Without a parameter it will use /var/log as log directory."
    exit $retc
  fi
fi

cd "$logdir" || exit 123

# Removing stale metadata downloads left over by version --dup
# rm -rf UpdateTestcase-*

if ! set -o pipefail
then printf '%s\n' "Notice: This shell does not support \"-o pipefail\"." >&2
fi

logs_count=0
logs_success=0
logs_nodelete=0
logs_failed=0
targets='systemupdate_*.log-dupes.txt'
for logfile in $targets
do
  if [ "$logfile" != "$targets" ]
  then
    printf '%s' "- $logfile"
    logs_count="$(($logs_count+1))"
    tidied_log="$(printf '%s' "$logfile" | rev | cut -f 2- -d '-' | rev).txt"
    if sed -e 's/\cM//g' -e 's/Installing: [0-9][0-9]*%\x1b\[K//g' -e 's/\x1b\[K/\n/g' -e 's/^\[[0-9][0-9]* %] //g' -e 's/: \[[0-9][0-9]* %]$//g' -e 's/: [0-9][0-9]*%$//g' "$logfile" | uniq 2>/dev/null >"$tidied_log"
    then
      if rm "$logfile" 2>/dev/null
      then
        logs_success="$(($logs_success+1))"
        printf '%s\n' ": O.K."
      else
        logs_nodelete="$(($logs_nodelete+1))"
        printf '%s\n' ": Tidied, but failed to remove it!"
      fi
    else
      rm -f "$tidied_log" 2>/dev/null
      logs_failed="$(($logs_failed+1))"
      printf '%s\n' ": Tidying failed!"
    fi
  else retc=121
  fi
done
case $retc in
0)
  logs_remain="$(($logs_nodelete+$logs_failed))"
  if [ "$logs_remain" -eq 0 ]
  then
    if [ "$logs_count" -eq "$logs_success" ]
    then printf '%s\n' "Summary: Processed $logs_count untidy log file(s) in $logdir successfully." >&2
    else printf '%s\n' "Warning: Sucessfully processed $logs_success of $logs_count untidy log file(s) in $logdir (without a single failure), but the numbers differ (indicating an internal logic flaw in ${called})!" >&2
    fi
  else
    if [ "$logs_remain" -lt 120 ]
    then retc="$logs_remain"
    else retc=120
    fi
    if [ "$logs_count" -eq "$(($logs_success+$logs_remain))" ]
    then printf '%s\n' "Error: Processed $logs_count untidy log file(s) in ${logdir}, of these $logs_success sucessfully, $logs_nodelete tidied but failed to delete them and $logs_failed failed to tidy (hence $logs_remain untidy log files remain)!" >&2
    else printf '%s\n' "Error: Processed $logs_count untidy log file(s) in ${logdir}, of these $logs_success sucessfully, $logs_nodelete tidied but failed to delete them and $logs_failed failed to tidy (hence $logs_remain untidy log files remain)!  Additionally these numbers do not add up, indicating an internal logic flaw in ${called}!" >&2
    fi
  fi
  ;;
121)
  if [ "$logs_count$logs_success$logs_nodelete$logs_failed" = 0000 ]
  then printf '%s\n' "Notice: Found no untidy log file in $logdir" >&2
  else printf '%s\n' "Warning: Internal logic error, as no untidy log file was found in ${logdir}, although $called processed $logs_count untidy log file(s), of these $logs_success sucessfully, $logs_nodelete tidied but failed to delete them and $logs_failed failed to tidy!" >&2
  fi
  ;;
*)
  printf '%s\n' "Warning: Internal logic flaw, $called should never get here (return code is ${retc})!" >&2
  ;;
esac

exit "$retc"

