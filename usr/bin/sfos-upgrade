#/bin/bash
set -o posix
set -eufC

# Switched to use bash since version 2.1 of this script (in its first two lines), as this ensures that -o pipefail
# (in line 609) is available, after checking that bash seems to be present in mer-core at least since 2011-10-04 (see
# https://git.merproject.org/mer-core/bash ) and consequently in SailfishOS since its beginnings (checked v1.0.0.5 per
# curl https://releases.sailfishos.org/sources/sailfish-1.0.0.5-oss.tar.bz2 | tar -tv | fgrep 'bash' , as no earlier
# released version is available there, e.g. the first ones at https://coderus.openrepos.net/whitesoft/sailversion ).
# In (at least) recent SailfishOS releases /bin/sh is just a symbolic link to /bin/bash anyway, but have not checked
# that for ancient releases (which might be re-deployed after a "factory reset").
# Nevertheless, this script is still a Bourne (not-"Again") Shell script and stays free of bashisms.

# Exit codes:
#   0  Everything worked fine: all applicable checks, all applicable, preparatory steps, and the upgrade proper
#   1  A check failed
#   2  Help called
#   3  Called incorrectly (e.g., with wrong parameters)
#   4  Aborted upon user request
#   5  Error while interacting with the OS (reading / writing from the filesystem, calling programs, etc.)
#   6  Error while executing one of the preparatory steps for the upgrade proper
#   7  Error internal to sfos-upgrade
#  13  "Should never be reached" *) case #1
#  23  "Should never be reached" *) case #2
#  42  "Should never be reached" *) case #3

export LC_CTYPE="POSIX"
export LC_COLLATE="POSIX"

aborting ()
{
  if [ "$#" != "1" ]
  then
    echo "Warning due to internal error: The function aborting expects a single parameter, but was called with ${#}!" >&2
    retc=3
  fi
  ssu re "$(version | rev | cut -s -f 2 -d ' ' | rev)"
}

askyes ()
{
  # All its regular output goes to STDOUT (only warnings go to STDERR, plus 
  # returning "3" then) and it returns "1" when the user asks to abort.
  echo -n " (Y/N) "
  read yn
  case "$yn" in
  y|Y)
    retcode=0
    ;;
  *)
    echo "Aborting upon user request."
    retcode=1
    ;;
  esac
  if [ -n "$*" ]
  then
    echo "Warning due to internal error: The function askyes expects no parameters, but was called with \"${*}\"." >&2
    retcode=3
  fi
  return "$retcode"
}

compare_versions ()
{
  # Emits "e" (equal) if A = B, "l" (lesser) if A < B, "g" (greater) if A > B to STDOUT or "x" if A and B are not comparable, immediately
  # followed by the number of the first field {1..4} from the left, in which the mismatch occurred (hence always "e4" for a match).
  # Returns 1 if version strings are not comparable and 3 if not called with two arguments.
  if [ "$#" != "2" ]
  then
    echo "Warning due to internal error: The function compare_versions expects 2 parameters, but was called with ${#}!" >&2
    retc=3
  else
    version_a="$1"
    version_b="$2"
    retc=0
    comparison="e"
    for field_num in 1 2 3 4
    do
      a_substring="$(echo "$version_a" | cut -s -f "$field_num" -d '.')"
      b_substring="$(echo "$version_b" | cut -s -f "$field_num" -d '.')"
      if [ "$a_substring" != "$b_substring" ]
      then
        if [ "$a_substring" -lt "$b_substring" ]
        then
          comparison="l"
          break
        elif [ "$a_substring" -gt "$b_substring" ]
        then
          comparison="g"
          break
        else
          echo "Warning from function compare_versions: Version strings \"${version_a}\" and \"${version_b}\" are not comparable!" >&2
          retc=1
          comparison="x"
          break
        fi
      fi
    done
    echo "$comparison$field_num"
  fi
  return "$retc"
}

check_releases ()
{
  if [ "$#" != "2" ]
  then
    echo "Warning due to internal error: The function check_releases expects 2 parameters, but was called with ${#}!" >&2
    retc=3
  fi
}

# Main script

called="$(basename "$0")"
if ! echo " $(id -un) $(id -Gn) " | fgrep -q ' root '
then
  echo "Aborting: $called must be started with root privileges." >&2
  exit 3
fi

installed_release="$(version | rev | cut -s -f 2 -d ' ' | rev)"

case "$#" in
0)
1)
  case "$1" in
  [1-9].[0-9].[0-9].[0-9]|[1-9].[0-9].[0-9].[1-9][0-9])
    upgrade_release="$1"
    ;;
  -a|--auto)  # Determinining next installable release per Jolla tools
    if osupdate_check="$(/usr/libexec/sailfish-osupdateservice osupdate-check 2>&1 > /dev/null)" && [ -z "$osupdate_check" ] && true
    then
      upgrade_release="$(ssu re | rev | cut -f 1 -d ' ' | rev)"
    else
      echo "Aborting, because sailfish-osupdateservice osupdate-check emitted to STDERR:"
      echo "$osupdate_check"
      exit 5
    fi
    ;;
  -s|--ssu)  # Extracting upgrade release from SSU
    upgrade_release="$(ssu re | rev | cut -f 1 -d ' ' | rev)"
    ;;
  -h|--help)
    echo "Usage: $called <version>|-a|-auto|-s|-ssu|-h|--help"
    echo "With a version number provided as parameter it sets SSU to this version and in release mode before upgrading.  This is the regular use case."
    echo "Without a version number it retrieves the one set for SSU to perform slightly relaxed checks, but does not alter SSU's settings for upgrading."
    exit 2
    ;;
  *)
    echo "Aborting: Inorrect option or version format \"${upgrade_release}\" provided." >&2
    exit 3
    ;;
  esac
  ;;
*)
  echo "Aborting: No extra parameters expected, but called with \"${*}\"." >&2
  exit 3
  ;;
esac



if [ -z "$*" ]
then
  set_ssu=""
  upgrade_release="$(ssu re | rev | cut -f 1 -d ' ' | rev)"
else
  set_ssu="yes"
  ssu_set="$(ssu re | rev | cut -f 1 -d ' ' | rev)"
  
  shift
  if [ -n "$*" ]
  then
    echo "Aborting: No extra parameters expected, but called with \"${*}\"." >&2
    exit 3
  fi
  
  compar_s="$(compare_versions "$installed_release" "$ssu_set")"
  case "$compar_s" in
  e?)
    true
    ;;
  l?)
    echo "Notice: The installed version $installed_release is smaller than the one currently set for SSU (${ssu_set})." >&2
    echo -n "A possible reason for this is, that the \'sailfish-osupdateservice osupdate-check\' invoked by osupdate-check.service (which is regularly triggered by osupdate-check.timer)" >&2
    echo " does more than just checking (observed with SailfishOS 3.0.2 and earlier): E.g., setting ssu to the recent release version or next stop release." >&2
    echo "Never mind, the version for SSU will be set correctly again, later on." >&2
    echo >&2
    ;;
  g?)
    echo "Warning: The installed version $installed_release is greater than the one currently set for SSU (${ssu_set})." >&2
    echo "This is quite unusual!" >&2
    echo "Nevertheless, the version for SSU will be set correctly again, later on." >&2
    echo -n "Do you want to continue?" >&2
    askyes >&2
    echo >&2
    ;;
  *)
    echo "Comparing versions in check for the installed version differing from the one currently set for SSU failed." >&2
    exit 7
    ;;
  esac
fi

if ! sfos_releases="$(curl -sS https://coderus.openrepos.net/whitesoft/sailversion | cut -f 1 -d ' ' | grep '^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$')"
then
  echo "Notice: Failed to retrieve list of SailfishOS releases, hence unable to check the validity of version number \"${upgrade_release}\"." >&2
  if [ -z "$set_ssu" ]
  then echo -n "Do you want to continue?" >&2
  else echo -n "Do you really want to continue?" >&2
  fi
  askyes >&2
  echo >&2
elif ! echo "$sfos_releases" | grep -q "^$(echo "$upgrade_release" | sed 's/\./\\\./g')\$"
then
  echo "Warning: \"${upgrade_release}\" does not seem to be a publicly released SailfishOS version!" >&2
  echo -n "Do you really want to continue?" >&2
  askyes >&2
  echo >&2
fi

if [ "$installed_release" = "$upgrade_release" ]
then compar0="e4"
else
  known_stop_releases="3.0.0.8\n2.2.0.29\n2.0.5.6\n2.0.0.10\n1.1.9.30\n1.1.7.28\n1.1.2.16\n1.0.2.5\n1.0.0.5"
  # 0.99.5.11, 1.0.0.5 and 1.0.1.10 are not documented to be "stop releases",
  # taking the information of sections 4 and 5 (in combination!) at
  # https://jolla.zendesk.com/hc/en-us/articles/201836347#4 into account.
  # But 2.0.5.6 seems to be a "stop release", at least on some devices, see comments thread to
  # https://together.jolla.com/question/207172/downgrade-sailfish-os/?answer=207190#post-id-207190
  # Also added 1.0.0.5 as a precaution, because it seems to be the oldest widely deployed SailfishOS
  # release (i.e., *on* and hence also *in* the "factory images" of the first commercially distributed
  # Jolla 1 phones), thus being the oldest one widely tested to upgrade from (and Jolla may assume
  # only early developers to have ever obtained an earlier release on their Jolla 1 phones, hence
  # not mentioning 1.0.0.5 in Jolla's "official" guides as a stop release).
  if ! recent_stop_releases="$(curl -sS https://jolla.zendesk.com/hc/en-us/articles/201836347 | sed -n '/id="4"/,/id="5"/p' | sed -n '/<ul>/,/<\/ul>/p' | sed -n '/<li>/,/<\/li>/p' | sed 's/<[^>]*>/\n/g' | tr -c '.0-9' '\n' | egrep '^[1-9]\.[0-9]\.[0-9]\.[0-9]$|^[1-9]\.[0-9]\.[0-9]\.[1-9][0-9]$')"
  then
    echo "Warning: Failed to extract the current \"stop releases\" from https://jolla.zendesk.com/hc/en-us/articles/201836347#4" >&2
    echo "Hence using an internal, potentially outdated list of stop releases instead." >&2
    if [ -z "$set_ssu" ]
    then echo -n "Do you want to continue?" >&2
    else echo -n "Do you really want to continue?" >&2
    fi
    askyes >&2
    echo >&2
  fi
  all_stop_releases="$(echo -e "${recent_stop_releases}\n$known_stop_releases" | grep -v '^$' | sort -u)"
  compar0="$(compare_versions "$installed_release" "$upgrade_release")"
  case "$compar0" in
  e?)  # Equality
    echo "Noticed a supposedly harmless internal logical mistake: Equality was tested before!" >&2
    echo "Hence carrying on." >&2
    echo >&2
    ;;
  l?)  # Upgrade
    # Iterating upwards through all stop releases:
    for stop_release in $all_stop_releases
    do
      compar1="$(compare_versions "$stop_release" "$installed_release")"
      case "$compar1" in
      g?)  # Hit the first stop release, which is greater than the installed release.
        compar2="$(compare_versions "$stop_release" "$upgrade_release")"
        case "$compar2" in
        l?)
          echo "Notice: Upgrading from $installed_release to $upgrade_release would omit installing $stop_release as a stop release!" >&2
          if [ -n "$set_ssu" ]
          then echo "Thus upgrading to $stop_release instead." >&2
            else
            echo -n "Set SSU to $stop_release before upgrading (a negative reply aborts)?" >&2
            askyes >&2
            set_ssu="yes"
          fi
          upgrade_release="$stop_release"
          echo >&2
          break
          ;;
        [eg]?)  # A general downgrade check is performed later; this solely deals with downgrading "below" stop releases (here: "or not").
          break
          ;;
        *)
          echo "Comparing versions in \"stop releases\" check #2a failed." >&2
          exit 7
          ;;
        esac
        ;;
      [el]?)  # Continue looping
        true
        ;;
      *)
        echo "Comparing versions in \"stop releases\" check #1a failed." >&2
        exit 7
        ;;
      esac
    done
    ;;
  g?)  # Downgrade
    # Iterating downwards through all stop releases:
    for stop_release in $(echo "$all_stop_releases" | sort -r)
    do
      # A general downgrade check is performed later; this solely deals with downgrading "below" stop releases.
      compar1="$(compare_versions "$stop_release" "$installed_release")"
      case "$compar1" in
      [el]?)  # Hit the first stop release, which is lesser or equal than the installed release.
        compar2="$(compare_versions "$stop_release" "$upgrade_release")"
        case "$compar2" in
        [el]?)  # A general downgrade check is performed later; this solely deals with downgrading "below" stop releases (here: "or not").
          break
          ;;
        g4)
          echo "Warning: About to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which downgrades to a \"point release\" \"below\" the stop release $stop_release." >&2
          echo "While downgrading between \"point releases\" seems to be generally feasible, doing so \"below\" a stop release implies the danger of the changes making it a stop release not all being introduced with SailfishOS $(echo "$stop_release" | cut -f -3 -d '.').0 (e.g. with ${stop_release}, and thus potentially downgrading \"across\" these changes, which would break this SailfishOS installation)." >&2
          echo >&2
          break
          ;;
        g?)
          echo "Aborting: Trying to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which is \"across\" the stop release ${stop_release}!" >&2
          echo "Doing that would likely break this SailfishOS installation." >&2
          echo "The only way to achieve this properly is to execute a \"factory reset\", followed by UPgrading to the intended version." >&2
          exit 3
          ;;
        *)
          echo "Comparing versions in \"stop releases\" check #2b failed." >&2
          exit 7
          ;;
        esac
        ;;
      g4)  # Hit the first stop release, which is greater but in the same stop release range (i.e. only differs by the "point release" number) than the installed release.
        compar2="$(compare_versions "$stop_release" "$upgrade_release")"
        case "$compar2" in
        [el]?)
          echo "Noticed a supposedly harmless internal logical mistake!" >&2
          echo "Hence carrying on." >&2
          echo >&2
          break
          ;;
        g4)
          echo "Warning: About to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which downgrades to a \"point release\" \"within\" the stop release range $(echo "$stop_release" | cut -f -3 -d '.').x!" >&2
          echo "While downgrading between \"point releases\" seems to be generally feasible, doing so \"within\" a stop release range implies the danger of the changes making it a stop release not all being introduced with SailfishOS $(echo "$stop_release" | cut -f -3 -d '.').0 (e.g. with ${installed_release}, and hence potentially downgrading \"across\" these changes, which would break this SailfishOS installation)." >&2
          echo >&2
          break
          ;;
        g?)
          echo "Aborting: Trying to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which is \"across\" the stop release ${stop_release}!" >&2
          echo "Doing that would likely break this SailfishOS installation." >&2
          echo "The only way to achieve this properly is to execute a \"factory reset\", followed by UPgrading to the intended version." >&2
          exit 3
          ;;
        *)
          echo "Comparing versions in \"stop releases\" check #2c failed." >&2
          exit 7
          ;;
        esac
        ;;
      g?)  # Continue looping
        true
        ;;
      *)
        echo "Comparing versions in \"stop releases\" check #1b failed." >&2
        exit 7
        ;;
      esac
    done
    ;;
  *)
    echo "Comparing versions in \"stop releases\" check #0 failed." >&2
    exit 7
    ;;
  esac
fi

if mount -t btrfs | cut -s -f 3 -d ' ' | grep -q '^/$'
then
  btrfs_check="KO"
  if which btrfs-balancer > /dev/null 2>&1
  then
    btrfs_allocation="$(btrfs-balancer allocation / | tr -s ' ')"
    btrfs_alloc_percent="$(echo "$btrfs_allocation" | grep '^Allocated: ' | cut -f 2 -d ' ')"
    if ! [ "$btrfs_alloc_percent" -lt "90" ]
    then
      echo "Aborting: Allocation (${btrfs_alloc_percent}%) of the root filesystem (BTRFS) is 90% or more!" >&2
      echo "Please perform a btrfs-balancer run before retrying." >&2
      exit 1
    elif ! [ "$btrfs_alloc_percent" -lt "85" ]
    then
      echo "Warning: Allocation (${btrfs_alloc_percent}%) of the root filesystem (BTRFS) is 85% or more!" >&2
      echo "Please consider to abort and to perform a btrfs-balancer run before retrying." >&2
      echo >&2
    fi
    btrfs_total="$(echo "$btrfs_allocation" | grep '^Total: ' | cut -f 2 -d ' ')"
    btrfs_used="$(echo "$btrfs_allocation" | grep '^Used: ' | cut -f 2 -d ' ')"
    if btrfs_unallocated="$(expr "$btrfs_total" '-' "$btrfs_used")"
    then
      btrfs_check="ok"
      if ! [ "$btrfs_unallocated" -ge "1610612736" ]
      then
        echo "Aborting: Less than 1.5 GiB unallocated space ($btrfs_unallocated Bytes) on the root filesystem (BTRFS)!" >&2
        echo "Please perform a btrfs-balancer run before retrying." >&2
        exit 1
      elif ! [ "$btrfs_unallocated" -ge "2147483648" ]
      then
        echo "Warning: Less than 2 GiB unallocated space ($btrfs_unallocated Bytes) on the root filesystem (BTRFS)!" >&2
        echo "Please consider to abort and to perform a btrfs-balancer run before retrying." >&2
        echo >&2
      fi
    fi
  elif which btrfs > /dev/null 2>&1
  then
    btrfs_allocation="$(btrfs filesystem df / | grep '^Data, ' | cut -s -f 2 -d ':' | tr ',' '\n' | tr -d ' ' | rev | grep '^Bi*G[0-9][0-9]\.[0-9][0-9]*=' | sed 's/^Bi*G//g' | tr -d '.' | rev)"
    btrfs_total="$(echo "$btrfs_allocation" | grep '^total=' | cut -f 2 -d '=')"
    btrfs_used="$(echo "$btrfs_allocation" | grep '^used=' | cut -f 2 -d '=')"
    if btrfs_unallocated="$(expr "$btrfs_total" '-' "$btrfs_used")"
    then
      btrfs_check="ok"
      if ! [ "$btrfs_unallocated" -ge "200" ]
      then
        echo "Aborting: Less than 2 GiB unallocated data space ($(echo "$btrfs_unallocated" | rev | cut -c 3- | rev).$(echo "$btrfs_unallocated" | rev | cut -c 1-2 | rev) GiB) on the root filesystem (BTRFS)!" >&2
        echo "Please balance the btrfs root filesystem before retrying." >&2
        exit 1
      elif ! [ "$btrfs_unallocated" -ge "250" ]
      then
        echo "Warning: Less than 2.5 GiB unallocated data space ($(echo "$btrfs_unallocated" | rev | cut -c 3- | rev).$(echo "$btrfs_unallocated" | rev | cut -c 1-2 | rev) GiB) on the root filesystem (BTRFS)!" >&2
        echo "Please consider to abort and to balance the btrfs root filesystem before retrying." >&2
        echo >&2
      fi
    fi
  fi
  if [ "$btrfs_check" != "ok" ]
  then
    echo "Aborting: Cannot properly determine allocation of the root filesystem (BTRFS)." >&2
    exit 5
  fi
else
  free_space="$(df -k / | sed -n '2p' | rev | grep '^/ ' | tr -s ' ' | cut -s -f 3 -d ' ' | rev)"
  if ! [ "$free_space" -ge "524288" ]
  then
    echo "Aborting: Less than 0.5 GiB ($free_space KiB) of free space on the root filesystem!" >&2
    echo "Please clean up or enlarge the root filesystem before retrying." >&2
    exit 1
  elif ! [ "$free_space" -ge "786432" ]
  then
    echo "Warning: Less than 0.75 GiB ($free_space KiB) of free space on the root filesystem!" >&2
    echo "Please consider to abort and to clean up or enlarge the root filesystem before retrying." >&2
    echo >&2
  fi
fi

POWER_SUPPLY_STATUS=""
POWER_SUPPLY_CAPACITY=""
POWER_SUPPLY_CHARGE_NOW=""
POWER_SUPPLY_CHARGE_FULL=""
POWER_SUPPLY_CHARGE_FULL_DESIGN=""
# References: https://www.kernel.org/doc/Documentation/power/power_supply_class.txt and https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-power
battery_info=""
for battery_uevents in /sys/class/power_supply/battery /sys/class/power_supply/*_battery
do
  if [ "$battery_uevents" != "/sys/class/power_supply/*_battery" ] && { . "${battery_uevents}/uevent"; } > /dev/null 2>&1 && true
  then
    battery_info="sourced"
    break
  fi
done
if [ -n "$battery_info" ]
then
  case "${POWER_SUPPLY_CHARGE_FULL_DESIGN}-${POWER_SUPPLY_CHARGE_NOW}-${POWER_SUPPLY_CHARGE_FULL}-$POWER_SUPPLY_CAPACITY" in
  [1-9][0-9][0-9]*-[0-9]*-*-*)
    power_supply_capacity_design="$(expr "${POWER_SUPPLY_CHARGE_NOW}00" '/' "$POWER_SUPPLY_CHARGE_FULL_DESIGN" 2> /dev/null)"
    ;;
  [1-9][0-9][0-9]*-*-[1-9][0-9]*-[0-9]*)
    power_supply_charge_now="$(expr "$POWER_SUPPLY_CHARGE_FULL" '*' "$POWER_SUPPLY_CAPACITY" 2> /dev/null)"
    power_supply_capacity_design="$(expr "$power_supply_charge_now" '/' "$POWER_SUPPLY_CHARGE_FULL_DESIGN" 2> /dev/null)"
    ;;
  *)
    power_supply_capacity_design=""
    ;;
  esac
else
  echo "Aborting: Failed to read battery information." >&2
  exit 5
fi
battery_check="KO"
case "${POWER_SUPPLY_STATUS}-${power_supply_capacity_design}-$POWER_SUPPLY_CAPACITY" in
Charging-[0-9]*-*|Full-[0-9]*-*)
  if ! [ "$power_supply_capacity_design" -gt "18" ]
  then
    echo "Warning: Battery is charged less than 18.5% (${power_supply_capacity_design}%) of its original design capacity!" >&2
    echo -n "Continue charging before " >&2
    if [ -z "$set_ssu" ]
    then battery_check="ask"
    fi
  else
    battery_check="ok"
    if ! [ "$power_supply_capacity_design" -gt "25" ]
    then
      echo "Notice: Battery is charged 25% or less (${power_supply_capacity_design}%) of its original design capacity." >&2
      echo "Please continue charging throughout the upgrade process!" >&2
      echo >&2
    fi
  fi
  ;;
*-[0-9]*-*)
  if ! [ "$power_supply_capacity_design" -gt "25" ]
  then
    echo "Warning: Battery is charged 25% or less (${power_supply_capacity_design}%) of its original design capacity!" >&2
    echo -n "Plug in a charger before " >&2
  else
    battery_check="ok"
    if ! [ "$power_supply_capacity_design" -gt "37" ]
    then
      echo "Notice: Battery is charged less than 37.5% (${power_supply_capacity_design}%) of its original design capacity." >&2
      echo "Please plug in a charger before continuing." >&2
      echo >&2
    fi
  fi
  ;;
Charging-*-[0-9]*|Full-*-[0-9]*)
  if ! [ "$POWER_SUPPLY_CAPACITY" -gt "25" ]
  then
    echo "Warning: Battery is charged 25% or less (${POWER_SUPPLY_CAPACITY}%) of its capacity!" >&2
    echo -n "Continue charging before " >&2
    if [ -z "$set_ssu" ]
    then battery_check="ask"
    fi
  else
    battery_check="ok"
    if ! [ "$POWER_SUPPLY_CAPACITY" -gt "33" ]
    then
      echo "Notice: Battery is charged less than 33.3% (${POWER_SUPPLY_CAPACITY}%) of its capacity." >&2
      echo "Please continue charging throughout the upgrade process!" >&2
      echo >&2
    fi
  fi
  ;;
*-*-[0-9]*)
  if ! [ "$POWER_SUPPLY_CAPACITY" -gt "33" ]
  then
    echo "Warning: Battery is charged less than 33.3% (${POWER_SUPPLY_CAPACITY}%) of its capacity!" >&2
    echo -n "Plug in a charger before " >&2
  else
    battery_check="ok"
    if ! [ "$POWER_SUPPLY_CAPACITY" -ge "50" ]
    then
      echo "Notice: Battery is charged less than 50% (${POWER_SUPPLY_CAPACITY}%) of its capacity." >&2
      echo "Please plug in a charger before continuing." >&2
      echo >&2
    fi
  fi
  ;;
?*-*-*)
  echo "Warning: Failed to determine battery charge!" >&2
  echo "Check your device before " >&2
  if [ -z "$set_ssu" ]
  then battery_check="ask"
  fi
  ;;
*-*-*)
  echo "Warning: Failed to determine battery charging state!" >&2
  echo "Check your device before " >&2
  if [ -z "$set_ssu" ]
  then battery_check="ask"
  fi
  ;;
*)
  exit 13
  ;;
esac
case "$battery_check" in
KO)
  echo "retrying: aborting!" >&2
  exit 1
  ;;
ask)
  echo "upgrading." >&2
  echo "When a power loss occurs during the upgrade process, it will fail." >&2
  echo -n "Do you really want to continue?" >&2
  askyes >&2
  echo >&2
  ;;
ok)
  true
  ;;
*)
  exit 23
  ;;
esac

if ! [ "$(uptime | cut -f 1 -d ',' | rev | grep '^nim ' | cut -f 2 -d ' ' | rev)" -lt "5" ] 2> /dev/null
then
  echo "Notice: Mind that $called is best run on a freshly rebooted device." >&2
  echo >&2
fi

compar_u="$(compare_versions "$installed_release" "$upgrade_release")"
case "$compar_u" in
e4)
  echo -n "Notice: Do you want to ensure this SailfishOS $upgrade_release installation to be complete and up to date?" >&2
  ;;
l?)
  echo -n "Notice: Do you want to upgrade SailfishOS from $installed_release to ${upgrade_release}?" >&2
  ;;
g?)
  case "$compar_u$set_ssu" in
  g4)
    echo "Notice: About to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which just carries a smaller \"point release\" number." >&2
    echo "Nevertheless this may make this SailfishOS installation not working properly." >&2
    echo "Note that the "official" (i.e. approved by Jolla) way to achieve this is to execute a \"factory reset\", followed by UPgrading to the intended version." >&2
    echo "Though you can try downgrading and if it fails or breaks some functionality, perform a \"factory reset\" then (in the worst case at the recovery console)." >&2
    echo -n "Do you want to do that?" >&2
    ;;
  g4?*)
    echo "Warning: About to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which just carries a smaller \"point release\" number." >&2
    echo "Nevertheless this may make this SailfishOS installation not working properly." >&2
    echo "Note that the "official" (i.e. approved by Jolla) way to achieve this is to execute a \"factory reset\", followed by UPgrading to the intended version." >&2
    echo "Though you may try downgrading and if it fails or breaks some functionality, perform a \"factory reset\" then (in the worst case at the recovery console)." >&2
    echo -n "Do you really want to do that?" >&2
    ;;
  g?)
    echo "Warning: About to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which differ in at least their \"second minor\" version (i.e., their third field)." >&2
    echo "This might make this SailfishOS installation not working properly!" >&2
    echo "Note that the proper way to achieve this is to execute a \"factory reset\", followed by UPgrading to the intended version." >&2
    echo "Although you may try downgrading and if it fails or breaks some functionality, perform a \"factory reset\" then (in the worst case at the recovery console)." >&2
    echo -n "Do you really want to do that?" >&2
    ;;
  g?*)
    echo "Aborting: Trying to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which differ in at least their \"second minor\" version (i.e., their third field)!" >&2
    echo "Though this might make this SailfishOS installation not working properly, this downgrade may be performed by setting SSU to the intended release before starting sfos-upgrade without a parameter." >&2
    echo "Note that the proper way to achieve this is to execute a \"factory reset\", followed by UPgrading to the intended version." >&2
    echo "Although you may try downgrading and if it fails or breaks some functionality, perform a \"factory reset\" then (in the worst case at the recovery console)."
    exit 3
    ;;
  *)
    echo "Comparing versions failed, when finally asking user if to perform a downgrade of SailfishOS." >&2
    exit 7
    ;;
  esac
  ;;
*)
  echo "Comparing versions failed, when finally asking user if to perform the up-, same- or down-grade of SailfishOS." >&2
  exit 7
  ;;
esac
askyes >&2
echo >&2

logfile="/var/log/systemupdate_${upgrade_release}-from-${installed_release}_$(date +'%F_%H-%M-%S').log-dupes.txt"
if ! touch "$logfile"
then
  echo "Aborting: Failed to create logfile!" >&2
  exit 5
fi

echo "Notice: For troubleshooting issues with the upgrade proper, please consult https://jolla.zendesk.com/hc/en-us/articles/360005795474" | tee -a "$logfile" >&2
echo | tee -a "$logfile" >&2

if ! set -o pipefail
then
  echo "Warning: Technically unable to abort, if one of the following, preparatory steps for the upgrade proper fails." | tee -a "$logfile" >&2
  echo | tee -a "$logfile" >&2
fi

emit_newline=""
for user_unit in \
  osupdate-check.timer osupdate-check.service \
  btrfsstatuschecker.service btrfschecker.timer btrfschecker.service beforebtrfscheckertimer.service \
  batterynotifierstatuschecker.service batterynotifier.timer batterynotifier.service \
  osmscout-server.socket osmscout-server.service
do
  if systemctl --user status "$user_unit" > /dev/null 2>&1
  then
    echo "- Stopping $user_unit" | tee -a "$logfile" >&2
    if ! systemctl --user stop "$user_unit" 2>&1 | tee -a "$logfile" >&2
    then
      echo -n "Notice: Failed to stop $user_unit (user)!  Continue?" | tee -a "$logfile" >&2
      askyes | tee -a "$logfile" >&2
    fi
    emit_newline="y"
  fi
done
for system_unit in \
  cron.service \
  btrfs-balancer.timer btrfs-balance.service \
  aliendalvik.service alien-settings.service alien-service-manager.service
do
  if systemctl status "$system_unit" > /dev/null 2>&1
  then
    echo "- Stopping $system_unit" | tee -a "$logfile" >&2
    if ! systemctl stop "$system_unit" 2>&1 | tee -a "$logfile" >&2
    then
      echo -n "Notice: Failed to stop $system_unit (system)!  Continue?" | tee -a "$logfile" >&2
      askyes | tee -a "$logfile" >&2
    fi
    emit_newline="y"
  fi
done
for process in store-client harbour-storema harbour-warehou harbour-osmscou pkcon zypper rpm
do
  if pgrep "$process" > /dev/null 2>&1
  then
    echo "- Stopping $process" | tee -a "$logfile" >&2
    if ! pkill "$process" 2>&1 | tee -a "$logfile" >&2
    then
      echo -n "Notice: Failed to stop $process (process)!  Continue?" | tee -a "$logfile" >&2
      askyes | tee -a "$logfile" >&2
    fi
    emit_newline="y"
  fi
done
if [ -n "$emit_newline" ]
then echo | tee -a "$logfile" >&2
fi

if [ -x /usr/share/harbour-themepacksupport/ocr.sh ]
then
  echo "- Disabling Theme Pack Support." | tee -a "$logfile" >&2
  if ! /usr/share/harbour-themepacksupport/ocr.sh 2>&1 | tee -a "$logfile" >&2
  then
    echo "Aborting: Failed to disable Theme Pack Support!" | tee -a "$logfile" >&2
    exit 6
  fi
  echo | tee -a "$logfile" >&2
fi

if which patchmanager > /dev/null 2>&1
then
  echo "- Unapplying all Patchmanager-Patches." | tee -a "$logfile" >&2
  if ! patchmanager --unapply-all >> "$logfile" 2>&1
  then
    echo "Aborting: Failed to unapply Patchmanager-Patches!" | tee -a "$logfile" >&2
    exit 6
  fi
  echo | tee -a "$logfile" >&2
fi

# Simplified since v2.3, because ssu dr seems to *always* return "O.K.":
compar_o="$(compare_versions "$installed_release" "1.0.4.20")$(compare_versions "$upgrade_release" "1.0.4.20")"
case "$compar_o" in
[eg]?[eg]?)
  true
  ;;
l???|??l?)
  if openrepos_repos="$(ssu lr | fgrep 'openrepo')"
  then
    # Reference: https://jolla.zendesk.com/hc/en-us/articles/201836347#5
    echo "- Disabling OpenRepos' repositories (*grading from or to below 1.0.4.20):" | tee -a "$logfile" >&2
    for open_repo in $(echo "$openrepos_repos" | cut -s -f 3 -d ' ')
    do
      echo "$open_repo" | tee -a "$logfile" >&2
      ssu dr "$open_repo" 2>&1 | tee -a "$logfile" >&2
    done
    echo | tee -a "$logfile" >&2
  fi
  ;;
*)
  echo "Comparing versions in \"*grading from or to below SailfishOS 1.0.4.20\" check failed." >&2
  exit 7
  ;;
esac

if [ -n "$set_ssu" ]  # ToDo: Always set ssu in release mode.
then
  echo "- Setting SSU to SailfishOS release:" | tee -a "$logfile" >&2
  if ! ssu re "$upgrade_release" 2>&1 | tee -a "$logfile"
  then
    echo "Aborting: Failed to set SSU to release ${upgrade_release}!" | tee -a "$logfile" >&2
    exit 6
  fi
  echo | tee -a "$logfile" >&2
fi

case "$upgrade_method" in
version)
  
echo "- Fetching and installing the SailfishOS upgrade from $installed_release to $upgrade_release (this may take a while):" | tee -a "$logfile" >&2
if ! version --dup 2>&1 | tee -a "$logfile"
then
  echo | tee -a "$logfile" >&2
  echo "Aborting: Failed to fetch or install the SailfishOS upgrade!" | tee -a "$logfile" >&2
  exit 6
fi
;;
zypper)
  zypper refresh
  zypper update
  ;;
pkcon)
  pkcon refresh
  pkcon -py update >> direct-log
  ;;
*)
  false
  ;;
esac

echo "Notice: After rebooting, do not miss to run post_$called" >&2
exit 0

