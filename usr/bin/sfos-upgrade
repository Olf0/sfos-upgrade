#/bin/bash
set -o posix
set -eufC

# Switched to use bash since version 2.1 of this script (in its first two lines), as this ensures that -o pipefail
# (in line 349) is available, after checking that bash seems to be present in mer-core at least since 2011-10-04 (see
# https://git.merproject.org/mer-core/bash ) and consequently in SailfishOS since its beginnings (checked v1.0.0.5 per
# curl https://releases.sailfishos.org/sources/sailfish-1.0.0.5-oss.tar.bz2 | tar -tv | fgrep 'bash' , as no earlier
# released version is available there, e.g. the first ones at https://coderus.openrepos.net/whitesoft/sailversion ).
# In (at least) recent SailfishOS releases /bin/sh is just a symbolic link to /bin/bash anyway, but have not checked
# that for ancient releases (which might be re-deployed after a "factory reset").
# Nevertheless, this script is still a Bourne (not-"Again") Shell script and stays free of bashisms.

# Exit codes:
#   0  Everything worked fine: all applicable checks, all applicable, preparatory steps, and the upgrade proper
#   1  A check failed
#   2  Help called
#   3  Called incorrectly (e.g., with wrong parameters)
#   4  Aborted upon user interaction
#   5  Error while interacting with the OS (reading / writing from the filesystem, calling programs, etc.)
#   6  Error while executing one of the preparatory steps for the upgrade proper
#  13  "Should never be reached" *) case #1
#  23  "Should never be reached" *) case #2
#  42  "Should never be reached" *) case #3

export LC_CTYPE="POSIX"
export LC_COLLATE="POSIX"

askyes ()
{
  echo -n " (Y/N) "
  read yn
  case "$yn" in
  y|Y)
    true
    ;;
  *)
    echo "Aborted by user."
    exit 4
    ;;
  esac
  if [ -n "$*" ]
  then
    echo "Notice: No parameters expected, but set: $*"
    return 1
  else 
    return 0
  fi
}

compare_versions ()
{
  # Returns 0 if A = B, 1 if A < B, 2 if A > B, 3 if incomparable, and 4 if not called with two parameters
  if [ "$#" -ne "2" ]
  then
    echo "Error: Two parameters expected, but $# received!"
    return 4
  fi
  version_a="$1" 
  version_b="$2"
  for i in 1 2 3 4
  do
    a_substring="$(echo "$version_a" | cut -f "$i" -d '.')"
    b_substring="$(echo "$version_b" | cut -f "$i" -d '.')" 
    if [ "$a_substrimg" = "$b_substring" ]
    then
      ret=0
    elif [ "$a_substring" -lt "$b_substring" ]
    then
      ret=1
      break
    elif [ "$a_substring" -gt "$b_substring" ]
    then
      ret=2
      break
    else
      ret=3
      break
    fi
  done
  return "$ret"
}

called="$(basename "$0")"
if ! echo " $(id -un) $(id -Gn) " | fgrep -q ' root '
then
  echo "Aborting: $called must be started with root privileges."
  exit 3
fi

installed_release="$(version | rev | cut -f 2 -d ' ' | rev)"
if [ -z "$*" ]
then
  set_ssu=""
  upgrade_release="$(ssu re | rev | cut -f 1 -d ' ' | rev)"
else
  set_ssu="yes"
  ssu_set="$(ssu re | rev | cut -f 1 -d ' ' | rev)"
  upgrade_release="$1"
  shift
  if [ -n "$*" ]
  then
    echo "No extra parameters expected, but set: $*"
    exit 3
  fi
  case "$upgrade_release" in
  [1-9].[0-9].[0-9].[0-9]|[1-9].[0-9].[0-9].[1-9][0-9])
    true
    ;;
  -h|--help)
    echo "Usage: $called [<version>]"
    echo "With a version number provided as parameter it sets SSU to this version and in release mode before upgrading.  This is the regular use case."
    echo "Without a version number it retrieves the one set for SSU to perform slightly relaxed checks, but does not alter SSU's settings for upgrading."
    exit 2
    ;;
  *)
    echo "Aborting: Inorrect version format provided, $upgrade_release"
    exit 3
    ;;
  esac
  if [ "$ssu_set" != "$installed_release" ]
  then
    echo "Notice: The installed version $installed_release differs from the one currently set for SSU (${ssu_set})."
    echo "A possible reason for this is, that the \'sailfish-osupdateservice osupdate-check\' invoked by osupdate-check.service"
    echo "(which is regularly triggered by osupdate-check.timer) does more than just checking (in SailfishOS 3.0.2 and earlier)"
    echo "(e.g., setting ssu to the recent release version or next stop release)."
    echo "Never mind, the version for SSU will be set correctly again, later on."
    echo
  fi
fi

if ! sfos_releases="$(curl -sS https://coderus.openrepos.net/whitesoft/sailversion | cut -f 1 -d ' ' | grep '^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$')"
then
  echo "Notice: Failed to retrieve list of SailfishOS releases, hence unable to check the validity of version number \"${upgrade_release}\"."
  echo -n "Do you want to continue?"
  askyes
  echo
elif ! echo "$sfos_releases" | grep -q "^$(echo "$upgrade_release" | sed 's/\./\\\./g')\$"
then
  echo "Warning: \"${upgrade_release}\" does not seem to be a publicly released SailfishOS version!"
  echo -n "Do you really want to continue?" 
  askyes 
  echo
fi

known_stop_releases="3.0.0.8\n2.2.0.29\n2.0.0.10\n1.1.9.30\n1.1.7.28\n1.1.2.16\n1.0.2.5"
# 0.99.5.11, 1.0.0.5 and 1.0.1.10 are not documented to be "stop releases",
# taking the information of sections 4 and 5 (in combination!) at
# https://jolla.zendesk.com/hc/en-us/articles/201836347#4 into account.
if ! recent_stop_releases="$(curl -sS https://jolla.zendesk.com/hc/en-us/articles/201836347 | sed -n '/id="4"/,/id="5"/p' | sed -n '/<ul>/,/<\/ul>/p' | sed -n '/<li>/,/<\/li>/p' | sed 's/<[^>]*>/\n/g' | tr -c '.0-9' '\n' | egrep '^[1-9]\.[0-9]\.[0-9]\.[0-9]$|^[1-9]\.[0-9]\.[0-9]\.[1-9][0-9]$')"
then
  echo "Warning: Failed to extract the current \"stop releases\" from https://jolla.zendesk.com/hc/en-us/articles/201836347#4"
  echo "Hence using an internal, potentially outdated list of stop releases instead."
  echo
fi
for i in $(echo -e "${recent_stop_releases}\n$known_stop_releases" | grep -v '^$' | sort -u)
do
  if [ "$(compare_versions "$installed_release" "$i"; echo "$?")" = "1" ] && [ "$(compare_versions "$upgrade_release" "$i"; echo "$?")" = "2" ] && true
  then
    echo "Notice: Upgrading from $installed_release to $upgrade_release would omit installing $i as a stop release!"
    if [ -n "$set_ssu" ]
    then echo "Thus upgrading to $i instead."
    else 
     echo -n "Set SSU to $i before upgrading (a negative reply aborts)?"
     askyes
     set_ssu="yes"
    fi
    upgrade_release="$i"
    echo
    break
  fi
done

if mount -t btrfs | cut -f 3 -d ' ' | grep -q '^/$'
then
  btrfs_check="KO"
  if which btrfs-balancer > /dev/null 2>&1
  then
    btrfs_allocation="$(btrfs-balancer allocation / | tr -s ' ')"
    btrfs_alloc_percent="$(echo "$btrfs_allocation" | grep '^Allocated: ' | cut -f 2 -d ' ')"
    if ! [ "$btrfs_alloc_percent" -lt "90" ]
    then
      echo "Aborting: Allocation (${btrfs_alloc_percent}%) of the root filesystem (BTRFS) is 90% or more!"
      echo "Please perform a btrfs-balancer run before retrying."
      exit 1
    elif ! [ "$btrfs_alloc_percent" -lt "85" ]
    then
      echo "Warning: Allocation (${btrfs_alloc_percent}%) of the root filesystem (BTRFS) is 85% or more!"
      echo "Please consider to abort and to perform a btrfs-balancer run before retrying."
      echo
    fi
    btrfs_total="$(echo "$btrfs_allocation" | grep '^Total: ' | cut -f 2 -d ' ')"
    btrfs_used="$(echo "$btrfs_allocation" | grep '^Used: ' | cut -f 2 -d ' ')"
    if btrfs_unallocated="$(expr "$btrfs_total" '-' "$btrfs_used")"
    then
      btrfs_check="ok"
      if ! [ "$btrfs_unallocated" -ge "1610612736" ]
      then
        echo "Aborting: Less than 1.5 GiB unallocated space ($btrfs_unallocated Bytes) on the root filesystem (BTRFS)!"
        echo "Please perform a btrfs-balancer run before retrying."
        exit 1
      elif ! [ "$btrfs_unallocated" -ge "2147483648" ]
      then
        echo "Warning: Less than 2 GiB unallocated space ($btrfs_unallocated Bytes) on the root filesystem (BTRFS)!"
        echo "Please consider to abort and to perform a btrfs-balancer run before retrying."
        echo
      fi
    fi
  elif which btrfs > /dev/null 2>&1
  then
    btrfs_allocation="$(btrfs filesystem df / | grep '^Data, ' | cut -f 2 -d ':' | tr ',' '\n' | tr -d ' ' | rev | grep '^Bi*G[0-9][0-9]\.[0-9][0-9]*=' | sed 's/^Bi*G//g' | tr -d '.' | rev)"
    btrfs_total="$(echo "$btrfs_allocation" | grep '^total=' | cut -f 2 -d '=')"
    btrfs_used="$(echo "$btrfs_allocation" | grep '^used=' | cut -f 2 -d '=')"
    if btrfs_unallocated="$(expr "$btrfs_total" '-' "$btrfs_used")"
    then
      btrfs_check="ok"
      if ! [ "$btrfs_unallocated" -ge "200" ]
      then
        echo "Aborting: Less than 2 GiB unallocated data space ($(echo "$btrfs_unallocated" | rev | cut -c 3- | rev).$(echo "$btrfs_unallocated" | rev | cut -c 1-2 | rev) GiB) on the root filesystem (BTRFS)!"
        echo "Please balance the btrfs root filesystem before retrying."
        exit 1
      elif ! [ "$btrfs_unallocated" -ge "250" ]
      then
        echo "Warning: Less than 2.5 GiB unallocated data space ($(echo "$btrfs_unallocated" | rev | cut -c 3- | rev).$(echo "$btrfs_unallocated" | rev | cut -c 1-2 | rev) GiB) on the root filesystem (BTRFS)!"
        echo "Please consider to abort and to balance the btrfs root filesystem before retrying."
        echo
      fi
    fi
  fi
  if [ "$btrfs_check" != "ok" ]
  then
    echo "Aborting: Cannot properly determine allocation of the root filesystem (BTRFS)."
    exit 5
  fi
else
  free_space="$(df -k / | sed -n '2p' | rev | grep '^/ ' | tr -s ' ' | cut -f 3 -d ' ' | rev)"
  if ! [ "$free_space" -ge "524288" ]
  then
    echo "Aborting: Less than 0.5 GiB ($free_space KiB) of free space on the root filesystem!"
    echo "Please clean up or enlarge the root filesystem before retrying."
    exit 1
  elif ! [ "$free_space" -ge "786432" ]
  then
    echo "Warning: Less than 0.75 GiB ($free_space KiB) of free space on the root filesystem!"
    echo "Please consider to abort and to clean up or enlarge the root filesystem before retrying."
    echo
  fi
fi

POWER_SUPPLY_STATUS=""
POWER_SUPPLY_CAPACITY=""
POWER_SUPPLY_CHARGE_NOW=""
POWER_SUPPLY_CHARGE_FULL=""
POWER_SUPPLY_CHARGE_FULL_DESIGN=""
# References: https://www.kernel.org/doc/Documentation/power/power_supply_class.txt and https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-power
if . /sys/class/power_supply/battery/uevent
then
  case "${POWER_SUPPLY_CHARGE_FULL_DESIGN}-${POWER_SUPPLY_CHARGE_NOW}-${POWER_SUPPLY_CHARGE_FULL}-$POWER_SUPPLY_CAPACITY" in
  [1-9][0-9][0-9]*-[0-9]*-*-*)
    power_supply_capacity_design="$(expr "${POWER_SUPPLY_CHARGE_NOW}00" '/' "$POWER_SUPPLY_CHARGE_FULL_DESIGN" 2> /dev/null)"
    ;;
  [1-9][0-9][0-9]*-*-[1-9][0-9]*-[0-9]*)
    power_supply_charge_now="$(expr "$POWER_SUPPLY_CHARGE_FULL" '*' "$POWER_SUPPLY_CAPACITY" 2> /dev/null)"
    power_supply_capacity_design="$(expr "$power_supply_charge_now" '/' "$POWER_SUPPLY_CHARGE_FULL_DESIGN" 2> /dev/null)"
    ;;
  *)
    power_supply_capacity_design=""
    ;;
  esac
else
  echo "Aborting: Failed to read battery information."
  exit 5
fi
battery_check="KO"
case "${POWER_SUPPLY_STATUS}-${power_supply_capacity_design}-$POWER_SUPPLY_CAPACITY" in
Charging-[0-9]*-*|Full-[0-9]*-*)
  if ! [ "$power_supply_capacity_design" -gt "18" ]
  then
    echo "Warning: Battery is charged less than 18.5% (${power_supply_capacity_design}%) of its original design capacity!"
    echo -n "Continue charging before "
    if [ -z "$set_ssu" ]
    then battery_check="ask"
    fi
  else
    battery_check="ok"
    if ! [ "$power_supply_capacity_design" -gt "25" ]
    then
      echo "Notice: Battery is charged 25% or less (${power_supply_capacity_design}%) of its original design capacity."
      echo "Please continue charging throughout the upgrade process!"
      echo
    fi
  fi
  ;;
*-[0-9]*-*)
  if ! [ "$power_supply_capacity_design" -gt "25" ]
  then
    echo "Warning: Battery is charged 25% or less (${power_supply_capacity_design}%) of its original design capacity!"
    echo -n "Plug in a charger before "
  else
    battery_check="ok"
    if ! [ "$power_supply_capacity_design" -gt "37" ]
    then
      echo "Notice: Battery is charged less than 37.5% (${power_supply_capacity_design}%) of its original design capacity."
      echo "Please plug in a charger before continuing."
      echo
    fi
  fi
  ;;
Charging-*-[0-9]*|Full-*-[0-9]*)
  if ! [ "$POWER_SUPPLY_CAPACITY" -gt "25" ]
  then
    echo "Warning: Battery is charged 25% or less (${POWER_SUPPLY_CAPACITY}%) of its capacity!"
    echo -n "Continue charging before "
    if [ -z "$set_ssu" ]
    then battery_check="ask"
    fi
  else
    battery_check="ok"
    if ! [ "$POWER_SUPPLY_CAPACITY" -gt "33" ]
    then
      echo "Notice: Battery is charged less than 33.3% (${POWER_SUPPLY_CAPACITY}%) of its capacity."
      echo "Please continue charging throughout the upgrade process!"
      echo
    fi
  fi
  ;;
*-*-[0-9]*)
  if ! [ "$POWER_SUPPLY_CAPACITY" -gt "33" ]
  then
    echo "Warning: Battery is charged less than 33.3% (${POWER_SUPPLY_CAPACITY}%) of its capacity!"
    echo -n "Plug in a charger before "
  else
    battery_check="ok"
    if ! [ "$POWER_SUPPLY_CAPACITY" -ge "50" ]
    then
      echo "Notice: Battery is charged less than 50% (${POWER_SUPPLY_CAPACITY}%) of its capacity."
      echo "Please plug in a charger before continuing."
      echo
    fi
  fi
  ;;
?*-*-*)
  echo "Warning: Failed to determine battery charge!"
  echo "Check your device before "
  if [ -z "$set_ssu" ]
  then battery_check="ask"
  fi
  ;;
*-*-*)
  echo "Warning: Failed to determine battery charging state!"
  echo "Check your device before "
  if [ -z "$set_ssu" ]
  then battery_check="ask"
  fi
  ;;
*)
  exit 13
  ;;
esac
case "$battery_check" in
KO)
  echo "retrying: aborting!"
  exit 1
  ;;
ask)
  echo "upgrading."
  echo "When a power loss occurs during the upgrade process, it will fail."
  echo -n "Do you really want to continue?"
  askyes
  echo
  ;;
ok)
  true
  ;;
*)
  exit 23
  ;;
esac

if ! [ "$(uptime | cut -f 1 -d ',' | rev | grep '^nim ' | cut -f 2 -d ' ' | rev)" -lt "5" ] 2> /dev/null
then
  echo "Notice: Mind that $called is best run on a freshly rebooted device."
  echo
fi

compare_versions "$installed_release" "$upgrade_release"
case "$?" in
0)
  ;;
1)
  echo -n "Notice: Do you want to upgrade SailfishOS from $installed_release to $upgrade_release?"
  ;;
2)
  echo "Warning: About to DOWNGRADE SailfishOS from $installed_release to $upgrade_release!"
  echo -n "Do you really want to do that?" 
  ;;
*)
  exit 42
  ;;
esac
askyes
echo

logfile="/var/log/systemupdate_${upgrade_release}-from-${installed_release}_$(date +'%F_%H-%M-%S').log-dupes.txt"
if ! touch "$logfile"
then
  echo "Aborting: Failed to create logfile!"
  exit 5
fi

echo "Notice: For troubleshooting issues with the upgrade proper, please consult https://jolla.zendesk.com/hc/en-us/articles/360005795474" | tee -a "$logfile"
echo | tee -a "$logfile"

if ! set -o pipefail
then
  echo "Warning: Technically unable to abort, if one of the following, preparatory steps for the upgrade proper fails." | tee -a "$logfile"
  echo | tee -a "$logfile"
fi

emit_newline=""
for i in \
  osupdate-check.timer osupdate-check.service \
  btrfsstatuschecker.service btrfschecker.timer btrfschecker.service beforebtrfscheckertimer.service \
  batterynotifierstatuschecker.service batterynotifier.timer batterynotifier.service \
  osmscout-server.socket osmscout-server.service
do
  if systemctl --user status "$i" > /dev/null 2>&1
  then
    echo "- Stopping $i" | tee -a "$logfile"
    if ! systemctl --user stop "$i" 2>&1 | tee -a "$logfile"
    then
      echo -n "Notice: Failed to stop $i (user)!  Continue?" | tee -a "$logfile"
      askyes | tee -a "$logfile"
    fi
    emit_newline="y"
  fi
done
for i in \
  cron.service \
  btrfs-balancer.timer btrfs-balance.service \
  aliendalvik.service alien-settings.service alien-service-manager.service
do
  if systemctl status "$i" > /dev/null 2>&1
  then
    echo "- Stopping $i" | tee -a "$logfile"
    if ! systemctl stop "$i" 2>&1 | tee -a "$logfile"
    then
      echo -n "Notice: Failed to stop $i (system)!  Continue?" | tee -a "$logfile"
      askyes | tee -a "$logfile"
    fi
    emit_newline="y"
  fi
done
for i in store-client harbour-storema harbour-warehou harbour-osmscou pkcon zypper rpm
do
  if pgrep "$i" > /dev/null 2>&1
  then
    echo "- Stopping $i" | tee -a "$logfile"
    if ! pkill "$i" 2>&1 | tee -a "$logfile"
    then
      echo -n "Notice: Failed to stop $i (process)!  Continue?" | tee -a "$logfile"
      askyes | tee -a "$logfile"
    fi
    emit_newline="y"
  fi
done
if [ -n "$emit_newline" ]
then echo | tee -a "$logfile"
fi

if [ -x /usr/share/harbour-themepacksupport/ocr.sh ]
then
  echo "- Disabling Theme Pack Support." | tee -a "$logfile"
  if ! /usr/share/harbour-themepacksupport/ocr.sh 2>&1 | tee -a "$logfile"
  then
    echo "Aborting: Failed to disable Theme Pack Support!" | tee -a "$logfile"
    exit 6
  fi
  echo | tee -a "$logfile"
fi

if which patchmanager > /dev/null 2>&1
then
  echo "- Unapplying all Patchmanager-Patches." | tee -a "$logfile"
  if ! patchmanager --unapply-all >> "$logfile" 2>&1
  then
    echo "Aborting: Failed to unapply Patchmanager-Patches!" | tee -a "$logfile"
    exit 6
  fi
  echo | tee -a "$logfile"
fi

# Simplified since v2.3, because ssu dr seems to *always* return "O.K.":
if [ "$(compare_versions "$installed_release" "1.0.4.20"; echo "$?")" = "1" ] && openrepos_repos="$(ssu lr | fgrep 'openrepo')" && true
then
  # Reference: https://jolla.zendesk.com/hc/en-us/articles/201836347#5
  echo "- Disabling OpenRepos' repositories:" | tee -a "$logfile"
  for i in $(echo "$openrepos_repos" | cut -f 3 -d ' ')
  do
    echo "$i" | tee -a "$logfile"
    ssu dr "$i" 2>&1 | tee -a "$logfile"
  done
  echo | tee -a "$logfile"
fi

if [ -n "$set_ssu" ]
then
  echo "- Setting SSU to SailfishOS release:" | tee -a "$logfile"
  if ! ssu re "$upgrade_release" 2>&1 | tee -a "$logfile"
  then
    echo "Aborting: Failed to set SSU to release ${upgrade_release}!" | tee -a "$logfile"
    exit 6
  fi
  echo | tee -a "$logfile"
fi

echo "- Fetching and installing the SailfishOS upgrade from $installed_release to $upgrade_release (this may take a while):" | tee -a "$logfile"
if ! version --dup 2>&1 | tee -a "$logfile"
then
  echo | tee -a "$logfile"
  echo "Aborting: Failed to fetch or install the SailfishOS upgrade!" | tee -a "$logfile"
  exit 6
fi

echo "Notice: After rebooting, do not miss to run post_$called"
exit 0

