#!/bin/bash
set -euC  # Omitting -f (aka -o noglob), because bash 3.2.57(1)-release does not perform a set +f (or +o noglob; plus setopt is not built-in) correctly, which would be needed later!

# Switched to use bash since version 2.1 of this script (in its first line), as this ensures that "-o pipefail"
# (in line 641) is available, after checking that bash seems to be present in mer-core at least since 2011-10-04
# (see https://git.sailfishos.org/mer-core/bash / https://git.merproject.org/mer-core/bash ) and consequently in
# SailfishOS since its beginnings (checked v1.0.0.5 per
# curl https://releases.sailfishos.org/sources/sailfish-1.0.0.5-oss.tar.bz2 | tar -tv | fgrep 'bash' , as no earlier
# released version is available there, e.g. the first ones at https://coderus.openrepos.net/whitesoft/sailversion ).
# In SailfishOS releases before 4.0, /bin/sh is just a symbolic link to /bin/bash anyway; though I have not checked
# that for ancient releases (which might be re-deployed after a "factory reset"), likely SailfishOS inherited that
# from Fedora, via MeeGo and Mer (MeeGo reconstructed), too (i.e., in addition to the presence of bash by default).
# Per SailfishOS 4.0, busybox's variant of ash has become the shell installed by default, which provides some
# bash compatibility when called via its bash-symlink (which is deployed by the busybox-symlinks-bash RPM),
# including "-o pipefail" (hurray!).  But not "-o posix" (which was used to guarantee shell behaviour as defined
# by POSIX up to sfos-upgrade 3.8.1), which hopefully causes no difference in the behaviour of bash-3.2, bash-5 and
# a 2020s busybox-ash (because any one of these may be installed).
# Nevertheless, this script is still a Bourne (not-"Again") Shell script and stays free of bashisms.

# Exit codes:
#   0  Everything worked fine: all applicable checks, all applicable, preparatory steps, and the upgrade proper
#   1  A check failed
#   2  Help called
#   3  Called incorrectly (e.g., with wrong parameters)
#   4  Aborted upon user request
#   5  Error while interacting with the OS (reading / writing from the filesystem, calling programs, etc.)
#   6  Error while executing one of the preparatory steps for the upgrade proper
#   7  Error internal to sfos-upgrade
#  13  "Should never be reached" *) case #1
#  23  "Should never be reached" *) case #2
#  42  "Should never be reached" *) case #3

export LANG=C  # Engineering English only
export LC_CTYPE=POSIX
export LC_COLLATE=POSIX

askyes ()
{
  # All its regular output goes to STDOUT (only warnings go to STDERR)
  # and it exits (instead of returning) when the user asks to abort.
  echo -n " (y/N) "
  read yn
  retcode=1
  case "$yn" in
  y|Y)
    retcode=0
    ;;
  *)
    echo "Aborting upon user request."
    exit 4
    ;;
  esac
  if [ -n "$*" ]
  then
    echo "Warning due to internal error: The function askyes expects no parameters, but was called with \"${*}\"." >&2
    retcode=3
  fi
  return "$retcode"
}

compare_versions ()
{
  # Emits "e" (equal) if A = B, "l" (lesser) if A < B, "g" (greater) if A > B to STDOUT or "x" if A and B are not comparable, immediately
  # followed by the number of the first field {1..4} from the left, in which the mismatch occurred (hence always "e4" for a match).
  # Returns 1 if version strings are not comparable and 3 if not called with two arguments.
  if [ "$#" != "2" ]
  then
    echo "Warning due to internal error: The function compare_versions expects 2 parameters, but was called with ${#}!" >&2
    retc=3
  else
    version_a="$1"
    version_b="$2"
    retc=0
    comparison="e"
    for field_num in 1 2 3 4
    do
      a_substring="$(echo "$version_a" | cut -s -f "$field_num" -d '.')"
      b_substring="$(echo "$version_b" | cut -s -f "$field_num" -d '.')"
      if [ "$a_substring" != "$b_substring" ]
      then  # When different, ...
        if [ "$a_substring" -lt "$b_substring" ]
        then comparison="l"
        elif [ "$a_substring" -gt "$b_substring" ]
        then comparison="g"
        else
          echo "Warning from function compare_versions: Version strings \"${version_a}\" and \"${version_b}\" are not comparable!" >&2
          retc=1
          comparison="x"
        fi
        break  # ... jump out of the loop.
      fi
    done
    echo "$comparison$field_num"
  fi
  return "$retc"
}

# Main script

called="$(basename "$0")"
if ! echo " $(id -un) $(id -Gn) " | fgrep -q ' root '
then
  echo "Aborting: $called must be started with root privileges." >&2
  exit 3
fi

installed_release="$(version | grep -o '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*' | sed -n '1p')"
if [ -z "$*" ]
then
  set_ssu=""
  upgrade_release="$(ssu re | rev | cut -f 1 -d ' ' | rev)"
else
  set_ssu="yes"
  ssu_set="$(ssu re | rev | cut -f 1 -d ' ' | rev)"
  upgrade_release="$1"
  shift
  if [ -n "$*" ]
  then
    echo "Aborting: No extra parameters expected, but called with \"${*}\"." >&2
    exit 3
  fi
  case "$upgrade_release" in
  [1-9].[0-9].[0-9].[0-9]|[1-9].[0-9].[0-9].[1-9][0-9])
    true
    ;;
  --verify)
    upgrade_release="$installed_release"
    ;;
  -\?|--help)
    echo "Usage: $called [<version>|--verify|--help]"
    echo "With a version number provided as parameter it sets SSU to this version and in release mode before upgrading.  This is the regular use case."
    echo "Without a version number it retrieves the one set for SSU to perform slightly relaxed checks, but does not alter SSU's settings for upgrading."
    echo "With --verify as argument $called performs a \"samegrade\" operation, i.e. checks if the correct versions of all recent RPMs are installed and updates or installs them accordingly."
    exit 2
    ;;
  *)
    echo "Aborting: Incorrect option or version format \"${upgrade_release}\" provided!" >&2
    echo "For a brief usage description, see: $called --help" >&2
    exit 3
    ;;
  esac
  compar_s="$(compare_versions "$installed_release" "$ssu_set")"
  case "$compar_s" in
  e?)
    true
    ;;
  l?)
    echo "Notice: The installed version $installed_release is smaller than the one currently set for SSU (${ssu_set})." >&2
    echo -n "A possible reason for this is, that the 'sailfish-osupdateservice osupdate-check' invoked by osupdate-check.service (which is regularly triggered by osupdate-check.timer)" >&2
    echo " does more than just checking (observed with SailfishOS 3.2.1 and earlier): E.g., setting ssu to the recent release version or next stop release." >&2
    echo "Never mind, the version for SSU will be set correctly again, later on." >&2
    echo >&2
    ;;
  g?)
    echo "Warning: The installed version $installed_release is greater than the one currently set for SSU (${ssu_set})." >&2
    echo "This is quite unusual!" >&2
    echo "Nevertheless, the version for SSU will be set correctly again, later on." >&2
    echo -n "Do you want to continue?" >&2
    askyes >&2
    echo >&2
    ;;
  *)
    echo "Comparing versions failed when checking, if the installed version differs from the one currently set for SSU." >&2
    exit 7
    ;;
  esac
fi

known_sfos_releases="4.3.0.12,4.2.0.21,4.2.0.19,4.1.0.24,4.1.0.23,4.0.1.48,4.0.1.45,3.4.0.24,3.4.0.22,3.3.0.16,3.3.0.14,3.2.1.20,3.2.1.19,3.2.0.14,3.2.0.12,3.1.0.12,3.1.0.11,3.0.3.10,3.0.3.9,3.0.3.8,3.0.2.8,3.0.1.14,3.0.1.13,3.0.1.11,3.0.0.11,3.0.0.8,3.0.0.5,2.2.1.23,2.2.1.20,2.2.1.19,2.2.1.18,2.2.0.29,2.1.4.15,2.1.4.14,2.1.4.13,2.1.4.12,2.1.3.7,2.1.3.5,2.1.3.3,2.1.2.3,2.1.1.26,2.1.1.25,2.1.1.24,2.1.1.23,2.1.1.12,2.1.0.11,2.1.0.10,2.1.0.9,2.0.5.6,2.0.4.14,2.0.4.13,2.0.3.14,2.0.3.11,2.0.2.51,2.0.2.48,2.0.2.47,2.0.2.45,2.0.2.43,2.0.1.11,2.0.1.9,2.0.1.7,2.0.0.10,1.1.9.30,1.1.9.28,1.1.9.27,1.1.9.24,1.1.9.23,1.1.7.28,1.1.7.27,1.1.7.25,1.1.7.24,1.1.7.23,1.1.6.27,1.1.6.26,1.1.6.24,1.1.4.29,1.1.4.28,1.1.4.24,1.1.4.22,1.1.2.16,1.1.2.15,1.1.2.13,1.1.2.10,1.1.1.27,1.1.1.26,1.1.1.24,1.1.0.39,1.1.0.38,1.1.0.37,1.1.0.29,1.1.0.26,1.1.0.23,1.1.0.22,1.1.0.19,1.0.8.21,1.0.8.20,1.0.8.19,1.0.8.18,1.0.7.18,1.0.7.16,1.0.7.14,1.0.7.12,1.0.5.19,1.0.5.16,1.0.5.13,1.0.5.12,1.0.5.11,1.0.4.20,1.0.4.16,1.0.4.12,1.0.4.10,1.0.3.8,1.0.3.7,1.0.3.5,1.0.2.5,1.0.1.12,1.0.1.10,1.0.1.6,1.0.0.5,1.0.0.3,1.0.0.1,0.99.6.8,0.99.6.3,0.99.5.11,0.99.5.8,0.99.5.6"
# Calling curl with the -k (= --insecure) option, which only disables the certificate validity checks, because after a factory reset the used certificate bundle is much too old (contains outdated root certifictes) to correctly verify the certificate chain.
if ! recent_sfos_releases="$(curl -sSk https://coderus.openrepos.net/whitesoft/sailversion | cut -f 1 -d ' ' | grep '^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$')"
then
  echo "Notice: Failed to retrieve list of recent SailfishOS releases, hence may be unable to check the validity of version number \"${upgrade_release}\"." >&2
  echo >&2
fi
all_sfos_releases="$(echo -e "${recent_sfos_releases}\n$(echo "$known_sfos_releases" | tr ',' '\n')" | grep -v '^$' | sort -ur)"
# Side note: all_sfos_releases is sorted from highest to lowest (by "sort -r"), in contrast to the all_stop_releases (below).
if ! echo "$all_sfos_releases" | grep -q "^$(echo "$upgrade_release" | sed 's/\./\\\./g')\$"
then
  echo "Warning: \"${upgrade_release}\" does not seem to be a publicly released SailfishOS version!" >&2
  echo -n "Do you really want to continue?" >&2
  askyes >&2
  echo >&2
fi

if [ "$installed_release" = "$upgrade_release" ]
then compar0="e4"
else
  # Because Jolla regularly fails to document their stop releases in a timely manner (see e.g., https://forum.sailfishos.org/t/scripted-download-of-https-jolla-zendesk-com-hc-en-us-articles-201836347-fails/7935/2 ),
  # I have to change the policy how to deal with this lacking information: All final releases, which are not documented not to be a stop release, are handled as a stop release starting with sfos-upgrade 3.9.1.
  known_stop_releases="4.3.0.12,4.2.0.21,4.1.0.24,4.0.1.48,3.4.0.24,3.2.0.12,3.0.0.8,2.2.0.29,2.0.5.6,2.0.0.10,1.1.9.30,1.1.7.28,1.1.2.16,1.0.2.5,1.0.0.5"
  # 0.99.5.11, 1.0.0.5 and 1.0.1.10 are not documented to be "stop releases", taking the information of sections 4 and 5 (in combination!)
  # at https://jolla.zendesk.com/hc/en-us/articles/201836347#4 into account.
  # But 2.0.5.6 seems to be a "stop release", at least on some devices, see comments thread to
  # https://together.jolla.com/question/207172/downgrade-sailfish-os/?answer=207190#post-id-207190
  # Also added 1.0.0.5 as a precaution, because it seems to be the oldest widely deployed SailfishOS
  # release (i.e., *on* and hence also *in* the "factory images" of the first commercially distributed
  # Jolla 1 phones), thus being the oldest one widely tested to upgrade from (and Jolla may assume
  # only early developers to have ever obtained an earlier release on their Jolla 1 phones, hence
  # not mentioning 1.0.0.5 in Jolla's "official" guides as a stop release).
  # Unfortunately not working anymore (for details, see https://github.com/Olf0/sfos-upgrade/issues/48#issuecomment-709380565 ff.),
  # thus disabling this safety measure against an outdated, internal list (above) for now:
   recent_stop_releases=""  # Substitute for the section below, which has to be "commented out" due to aforementioned "stop release list download prevention":
  #if ! recent_stop_releases="$(curl -sSk https://jolla.zendesk.com/hc/en-us/articles/201836347 | sed -n '/id="4"/,/id="5"/p' | sed -n '/<ul>/,/<\/ul>/p' | sed -n '/<li>/,/<\/li>/p' | sed 's/<[^>]*>/\n/g' | tr -c '.0-9' '\n' | egrep '^[1-9]\.[0-9]\.[0-9]\.[0-9]$|^[1-9]\.[0-9]\.[0-9]\.[1-9][0-9]$')"
  ## Calling curl with the -k (= --insecure) option, which only disables the certificate validity checks, because after a factory reset the used certificate bundle is much too old (contains outdated root certifictes) to correctly verify the certificate chain.
  #then
  #  echo "Warning: Failed to extract the current \"stop releases\" from https://jolla.zendesk.com/hc/en-us/articles/201836347#4.1" >&2
  #  echo "Hence using an internal, potentially outdated list of stop releases instead." >&2
  #  if [ -z "$set_ssu" ]
  #  then echo -n "Do you want to continue?" >&2
  #  else echo -n "Do you really want to continue?" >&2
  #  fi
  #  askyes >&2
  #  echo >&2
  #fi
  all_stop_releases="$(echo -e "${recent_stop_releases}\n$(echo "$known_stop_releases" | tr ',' '\n')" | grep -v '^$' | sort -u)"
  compar0="$(compare_versions "$installed_release" "$upgrade_release")"
  case "$compar0" in
  e?)  # Equality
    echo "Noticed a supposedly harmless internal logical mistake: Equality was tested before!" >&2
    echo "Hence carrying on." >&2
    echo >&2
    ;;
  l?)  # Upgrade
    # Iterating upwards through all stop releases:
    for stop_release in $all_stop_releases
    do
      compar1="$(compare_versions "$stop_release" "$installed_release")"
      case "$compar1" in
      g?)  # Hit the first stop release, which is greater than the installed release.
        compar2="$(compare_versions "$stop_release" "$upgrade_release")"
        case "$compar2" in
        l?)
          echo "Notice: Upgrading from $installed_release to $upgrade_release would omit installing $stop_release as a stop release!" >&2
          if [ -n "$set_ssu" ]
          then
            echo "Thus upgrading to $stop_release instead." >&2
            upgrade_release="$stop_release"
          else
            echo "Warning: Doing so will likely break this SailfishOS installation, unfortunately often only subtly so the issues caused might be observed way later!" >&2
            echo -n "Do you really want to continue?" >&2
            askyes >&2
          fi
          echo >&2
          break
          ;;
        [eg]?)  # A general downgrade check is performed later; this solely deals with downgrading "below" stop releases (here: "or not").
          break
          ;;
        *)
          echo "Comparing versions in \"stop releases\" check #2a failed." >&2
          exit 7
          ;;
        esac
        ;;
      [el]?)  # Continue looping
        true
        ;;
      *)
        echo "Comparing versions in \"stop releases\" check #1a failed." >&2
        exit 7
        ;;
      esac
    done
    ;;
  g?)  # Downgrade
    # Iterating downwards through all stop releases:
    for stop_release in $(echo "$all_stop_releases" | sort -r)
    do
      # A general downgrade check is performed later; this solely deals with downgrading "below" stop releases.
      compar1="$(compare_versions "$stop_release" "$installed_release")"
      case "$compar1" in
      [el]?)  # Hit the first stop release, which is lesser or equal than the installed release.
        compar2="$(compare_versions "$stop_release" "$upgrade_release")"
        case "$compar2" in
        [el]?)  # A general downgrade check is performed later; this solely deals with downgrading "below" stop releases (here: "or not").
          break
          ;;
        g4)
          echo "Warning: About to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which downgrades to a \"point release\" \"below\" the stop release $stop_release." >&2
          echo "While downgrading between \"point releases\" seems to be generally feasible, doing so \"below\" a stop release implies the danger of the changes making it a stop release not all being introduced with SailfishOS $(echo "$stop_release" | cut -f -3 -d '.').0 (e.g. with ${stop_release}, and thus potentially downgrading \"across\" these changes, which would break this SailfishOS installation)." >&2
          echo >&2
          break
          ;;
        g?)
          echo "Aborting: Trying to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which is \"across\" the stop release ${stop_release}!" >&2
          echo "Doing that would likely break this SailfishOS installation." >&2
          echo "The only way to achieve this properly is to execute a \"factory reset\", followed by UPgrading to the intended version." >&2
          exit 3
          ;;
        *)
          echo "Comparing versions in \"stop releases\" check #2b failed." >&2
          exit 7
          ;;
        esac
        ;;
      g4)  # Hit the first stop release, which is greater but in the same stop release range (i.e. only differs by the "point release" number) than the installed release.
        compar2="$(compare_versions "$stop_release" "$upgrade_release")"
        case "$compar2" in
        [el]?)
          echo "Noticed a supposedly harmless internal logical mistake!" >&2
          echo "Hence carrying on." >&2
          echo >&2
          break
          ;;
        g4)
          echo "Warning: About to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which downgrades to a \"point release\" \"within\" the stop release range $(echo "$stop_release" | cut -f -3 -d '.').x!" >&2
          echo "While downgrading between \"point releases\" seems to be generally feasible, doing so \"within\" a stop release range implies the danger of the changes making it a stop release not all being introduced with SailfishOS $(echo "$stop_release" | cut -f -3 -d '.').0 (e.g. with ${installed_release}, and hence potentially downgrading \"across\" these changes, which would break this SailfishOS installation)." >&2
          echo >&2
          break
          ;;
        g?)
          echo "Aborting: Trying to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which is \"across\" the stop release ${stop_release}!" >&2
          echo "Doing that would likely break this SailfishOS installation." >&2
          echo "The only way to achieve this properly is to execute a \"factory reset\", followed by UPgrading to the intended version." >&2
          exit 3
          ;;
        *)
          echo "Comparing versions in \"stop releases\" check #2c failed." >&2
          exit 7
          ;;
        esac
        ;;
      g?)  # Continue looping
        true
        ;;
      *)
        echo "Comparing versions in \"stop releases\" check #1b failed." >&2
        exit 7
        ;;
      esac
    done
    ;;
  *)
    echo "Comparing versions in \"stop releases\" check #0 failed." >&2
    exit 7
    ;;
  esac
fi

if mount -t btrfs | cut -s -f 3 -d ' ' | grep -q '^/$'
then
  btrfs_check="KO"
  if command -v btrfs-balancer > /dev/null 2>&1
  then
    btrfs_allocation="$(btrfs-balancer allocation / | tr -s ' ')"
    btrfs_alloc_percent="$(echo "$btrfs_allocation" | grep '^Allocated: ' | cut -f 2 -d ' ')"
    if ! [ "$btrfs_alloc_percent" -lt "90" ]
    then
      echo "Aborting: Allocation (${btrfs_alloc_percent}%) of the root filesystem (BTRFS) is 90% or more!" >&2
      echo "Please perform a btrfs-balancer run before retrying." >&2
      exit 1
    elif ! [ "$btrfs_alloc_percent" -lt "85" ]
    then
      echo "Warning: Allocation (${btrfs_alloc_percent}%) of the root filesystem (BTRFS) is 85% or more!" >&2
      echo "Please consider to abort and to perform a btrfs-balancer run before retrying." >&2
      echo >&2
    fi
    btrfs_total="$(echo "$btrfs_allocation" | grep '^Total: ' | cut -f 2 -d ' ')"
    btrfs_used="$(echo "$btrfs_allocation" | grep '^Used: ' | cut -f 2 -d ' ')"
    if btrfs_unallocated="$(expr "$btrfs_total" '-' "$btrfs_used")"
    then
      btrfs_check="ok"
      if ! [ "$btrfs_unallocated" -ge "1610612736" ]
      then
        echo "Aborting: Less than 1.5 GiB unallocated space ($btrfs_unallocated Bytes) on the root filesystem (BTRFS)!" >&2
        echo "Please perform a btrfs-balancer run before retrying." >&2
        exit 1
      elif ! [ "$btrfs_unallocated" -ge "2147483648" ]
      then
        echo "Warning: Less than 2 GiB unallocated space ($btrfs_unallocated Bytes) on the root filesystem (BTRFS)!" >&2
        echo "Please consider to abort and to perform a btrfs-balancer run before retrying." >&2
        echo >&2
      fi
    fi
  elif command -v btrfs > /dev/null 2>&1
  then
    btrfs_allocation="$(btrfs filesystem df / | grep -m 1 '^Data' | cut -s -f 2 -d ':' | tr ',' '\n' | tr -d ' ' | rev | grep '^Bi*G[0-9][0-9]\.[0-9][0-9]*=' | sed 's/^Bi*G//g' | tr -d '.' | rev)"
    btrfs_total="$(echo "$btrfs_allocation" | grep '^total=' | cut -f 2 -d '=')"
    btrfs_used="$(echo "$btrfs_allocation" | grep '^used=' | cut -f 2 -d '=')"
    if btrfs_unallocated="$(expr "$btrfs_total" '-' "$btrfs_used")"
    then
      btrfs_check="ok"
      if ! [ "$btrfs_unallocated" -ge "200" ]
      then
        echo "Aborting: Less than 2 GiB unallocated data space ($(echo "$btrfs_unallocated" | rev | cut -c 3- | rev).$(echo "$btrfs_unallocated" | rev | cut -c 1-2 | rev) GiB) on the root filesystem (BTRFS)!" >&2
        echo "Please balance the btrfs root filesystem before retrying." >&2
        exit 1
      elif ! [ "$btrfs_unallocated" -ge "250" ]
      then
        echo "Warning: Less than 2.5 GiB unallocated data space ($(echo "$btrfs_unallocated" | rev | cut -c 3- | rev).$(echo "$btrfs_unallocated" | rev | cut -c 1-2 | rev) GiB) on the root filesystem (BTRFS)!" >&2
        echo "Please consider to abort and to balance the btrfs root filesystem before retrying." >&2
        echo >&2
      fi
    fi
  fi
  if [ "$btrfs_check" != "ok" ]
  then
    echo "Aborting: Cannot properly determine allocation of the root filesystem (BTRFS)." >&2
    exit 5
  fi
else
  free_space="$(df -k / | sed -n '2p' | rev | grep '^/ ' | tr -s ' ' | cut -s -f 3 -d ' ' | rev)"
  # Note that in contrast to upgrading at the GUI, the RPMs for upgrading are not all downloaded first (and installed after booting into the system-update mode),
  # but downloaded and installed one by one, hence requiring much less space on persistent storage (i.e., the root filesystem) for upgrading.
  # OTOH, be aware that the download sizes Jolla mentions in their release notes are only valid for upgrading from the direct predecessor release,
  # but one may upgrade from one stop release to another, comprising the RPMs of multiple releases.
  # Furthermore these estimates from Jolla only cover their own default components (RPMs), individually installed RPMs (e.g., from the Jolla Store, OpenRepos or even Jolla's SailfishOS repositories) are not and cannot be accounted for.
  if ! [ "$free_space" -gt "524288" ]
  then  # This hard ½ GiB limit is an rough estimate of an upper boundary for the sum of all RPM size increases by an upgrade plus space for the package management's indexes, caches etc.
    echo "Aborting: Less than ½ GiB ($free_space KiB) free space on the root filesystem!" >&2
    echo "Please clean up or enlarge the root filesystem before retrying, see e.g.:" >&2
    echo "https://gitlab.com/Phoen7x/sailfishX/-/blob/master/README.md#33-increasing-the-root-lvm-volume-size" >&2
    exit 1
  elif ! [ "$free_space" -gt "786432" ]
  then  # As the largest SailfishOS upgrades (Jolla's estimates: the sum of the sizes of all updated RPMs (which are installed by default), when directly upgrading from the predecessor release) have been over 600 MiB (e.g., SFOS 3.3.0 -> 3.4.0), a ¾ GiB limit to warn explicitly seems to be reasonable.
    echo "Warning: Less than ¾ GiB ($free_space KiB) free space on the root filesystem!" >&2
    echo "Please consider to abort and to clean up or enlarge the root filesystem before retrying, see e.g.:" >&2
    echo "https://gitlab.com/Phoen7x/sailfishX/-/blob/master/README.md#33-increasing-the-root-lvm-volume-size" >&2
    echo -n "Do you really want to continue?" >&2
    askyes >&2
    echo >&2
  elif ! [ "$free_space" -ge "1048576" ]
  then  # This 1 GiB limit to emit a soft low space notice is intended to trigger users early to do something about it.
    echo "Notice: Less than 1 GiB ($free_space KiB) free space on the root filesystem!" >&2
    echo "Please consider to clean up or enlarge the root filesystem, see e.g.:" >&2
    echo "https://gitlab.com/Phoen7x/sailfishX/-/blob/master/README.md#33-increasing-the-root-lvm-volume-size" >&2
    echo >&2
  fi
fi

POWER_SUPPLY_STATUS=""
POWER_SUPPLY_CAPACITY=""
POWER_SUPPLY_CHARGE_NOW=""
POWER_SUPPLY_CHARGE_FULL=""
POWER_SUPPLY_CHARGE_FULL_DESIGN=""
# References: https://www.kernel.org/doc/Documentation/power/power_supply_class.txt and https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-power
battery_info=""
battery_path="/sys/class/power_supply/*battery*"
for battery_uevents in $battery_path
do
  # Workaround for Gemini's kernel broken battery information, which contains spaces: Use eval & sed instead of source / ".".
  # For details, see https://github.com/Olf0/sfos-upgrade/issues/39
  if [ "$battery_uevents" != "$battery_path" ] && [ -s "${battery_uevents}/uevent" ] && eval "$(tr '"' "'" < "${battery_uevents}/uevent" | sed 's/\([]_[:alnum:]]=\)\(.*\)/\1"\2"/')" > /dev/null 2>&1 && true
  then
    battery_info="sourced"
    break
  fi
done
if [ -n "$battery_info" ]
then
  case "${POWER_SUPPLY_CHARGE_FULL_DESIGN}-${POWER_SUPPLY_CHARGE_NOW}-${POWER_SUPPLY_CHARGE_FULL}-$POWER_SUPPLY_CAPACITY" in
  [1-9][0-9][0-9]*-[0-9]*-*-*)
    power_supply_capacity_design="$(expr "${POWER_SUPPLY_CHARGE_NOW}00" '/' "$POWER_SUPPLY_CHARGE_FULL_DESIGN" 2> /dev/null)"
    ;;
  [1-9][0-9][0-9]*-*-[1-9][0-9]*-[0-9]*)
    power_supply_charge_now="$(expr "$POWER_SUPPLY_CHARGE_FULL" '*' "$POWER_SUPPLY_CAPACITY" 2> /dev/null)"
    power_supply_capacity_design="$(expr "$power_supply_charge_now" '/' "$POWER_SUPPLY_CHARGE_FULL_DESIGN" 2> /dev/null)"
    ;;
  *)
    power_supply_capacity_design=""
    ;;
  esac
else
  echo "Aborting: Failed to read battery information." >&2
  exit 5
fi
battery_check="KO"
case "${POWER_SUPPLY_STATUS}-${power_supply_capacity_design}-$POWER_SUPPLY_CAPACITY" in
Charging-[0-9]*-*|Full-[0-9]*-*)
  if ! [ "$power_supply_capacity_design" -gt "18" ]
  then
    echo "Warning: Battery is charged less than 18.5% (${power_supply_capacity_design}%) of its original design capacity!" >&2
    echo -n "Continue charging before " >&2
    if [ -z "$set_ssu" ]
    then battery_check="ask"
    fi
  else
    battery_check="ok"
    if ! [ "$power_supply_capacity_design" -gt "25" ]
    then
      echo "Notice: Battery is charged 25% or less (${power_supply_capacity_design}%) of its original design capacity." >&2
      echo "Please continue charging throughout the upgrade process!" >&2
      echo >&2
    fi
  fi
  ;;
*-[0-9]*-*)
  if ! [ "$power_supply_capacity_design" -gt "25" ]
  then
    echo "Warning: Battery is charged 25% or less (${power_supply_capacity_design}%) of its original design capacity!" >&2
    echo -n "Plug in a charger before " >&2
  else
    battery_check="ok"
    if ! [ "$power_supply_capacity_design" -gt "37" ]
    then
      echo "Notice: Battery is charged less than 37.5% (${power_supply_capacity_design}%) of its original design capacity." >&2
      echo "Please plug in a charger before continuing." >&2
      echo >&2
    fi
  fi
  ;;
Charging-*-[0-9]*|Full-*-[0-9]*)
  if ! [ "$POWER_SUPPLY_CAPACITY" -gt "25" ]
  then
    echo "Warning: Battery is charged 25% or less (${POWER_SUPPLY_CAPACITY}%) of its capacity!" >&2
    echo -n "Continue charging before " >&2
    if [ -z "$set_ssu" ]
    then battery_check="ask"
    fi
  else
    battery_check="ok"
    if ! [ "$POWER_SUPPLY_CAPACITY" -gt "33" ]
    then
      echo "Notice: Battery is charged less than 33.3% (${POWER_SUPPLY_CAPACITY}%) of its capacity." >&2
      echo "Please continue charging throughout the upgrade process!" >&2
      echo >&2
    fi
  fi
  ;;
*-*-[0-9]*)
  if ! [ "$POWER_SUPPLY_CAPACITY" -gt "33" ]
  then
    echo "Warning: Battery is charged less than 33.3% (${POWER_SUPPLY_CAPACITY}%) of its capacity!" >&2
    echo -n "Plug in a charger before " >&2
  else
    battery_check="ok"
    if ! [ "$POWER_SUPPLY_CAPACITY" -ge "50" ]
    then
      echo "Notice: Battery is charged less than 50% (${POWER_SUPPLY_CAPACITY}%) of its capacity." >&2
      echo "Please plug in a charger before continuing." >&2
      echo >&2
    fi
  fi
  ;;
?*-*-*)
  echo "Warning: Failed to determine battery charge!" >&2
  echo "Check your device before " >&2
  if [ -z "$set_ssu" ]
  then battery_check="ask"
  fi
  ;;
*-*-*)
  echo "Warning: Failed to determine battery charging state!" >&2
  echo "Check your device before " >&2
  if [ -z "$set_ssu" ]
  then battery_check="ask"
  fi
  ;;
*)
  exit 13
  ;;
esac
case "$battery_check" in
KO)
  echo "retrying: aborting!" >&2
  exit 1
  ;;
ask)
  echo "upgrading." >&2
  echo "When a power loss occurs during the upgrade process, it will fail." >&2
  echo -n "Do you really want to continue?" >&2
  askyes >&2
  echo >&2
  ;;
ok)
  true
  ;;
*)
  exit 23
  ;;
esac

if ! [ "$(uptime | cut -f 1 -d ',' | rev | grep '^nim ' | cut -f 2 -d ' ' | rev)" -lt "5" ] 2> /dev/null
then
  echo "Notice: Mind that $called is best run on a freshly rebooted device." >&2
  echo >&2
fi

case "$compar0" in
e4)
  echo -n "Notice: Do you want to ensure this SailfishOS $upgrade_release installation to be complete and up to date?" >&2
  ;;
l?)
  echo -n "Notice: Do you want to upgrade SailfishOS from $installed_release to ${upgrade_release}?" >&2
  ;;
g?)
  case "$compar0$set_ssu" in
  g4)
    echo "Notice: About to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which just carries a smaller \"point release\" number." >&2
    echo "Nevertheless this may make this SailfishOS installation not working properly." >&2
    echo "Note that the "official" (i.e. approved by Jolla) way to achieve this is to execute a \"factory reset\", followed by UPgrading to the intended version." >&2
    echo "Though you can try downgrading and if it fails or breaks some functionality, perform a \"factory reset\" then (in the worst case at the recovery console)." >&2
    echo -n "Do you want to do that?" >&2
    ;;
  g4?*)
    echo "Warning: About to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which just carries a smaller \"point release\" number." >&2
    echo "Nevertheless this may make this SailfishOS installation not working properly." >&2
    echo "Note that the "official" (i.e. approved by Jolla) way to achieve this is to execute a \"factory reset\", followed by UPgrading to the intended version." >&2
    echo "Though you may try downgrading and if it fails or breaks some functionality, perform a \"factory reset\" then (in the worst case at the recovery console)." >&2
    echo -n "Do you really want to do that?" >&2
    ;;
  g?)
    echo "Warning: About to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which differ in at least their \"second minor\" version (i.e., their third field)." >&2
    echo "This might make this SailfishOS installation not working properly!" >&2
    echo "Note that the proper way to achieve this is to execute a \"factory reset\", followed by UPgrading to the intended version." >&2
    echo "Although you may try downgrading and if it fails or breaks some functionality, perform a \"factory reset\" then (in the worst case at the recovery console)." >&2
    echo -n "Do you really want to do that?" >&2
    ;;
  g?*)
    echo "Aborting: Trying to DOWNGRADE SailfishOS from $installed_release to ${upgrade_release}, which differ in at least their \"second minor\" version (i.e., their third field)!" >&2
    echo "Though this might make this SailfishOS installation not working properly, this downgrade may be performed by setting SSU to the intended release before starting sfos-upgrade without a parameter." >&2
    echo "Note that the proper way to achieve this is to execute a \"factory reset\", followed by UPgrading to the intended version." >&2
    echo "Although you may try downgrading and if it fails or breaks some functionality, perform a \"factory reset\" then (in the worst case at the recovery console)."
    exit 3
    ;;
  *)
    echo "Comparing versions failed, when finally asking user if to perform a downgrade of SailfishOS." >&2
    exit 7
    ;;
  esac
  ;;
*)
  echo "Comparing versions failed, when finally asking user if to perform the up-, same- or down-grade of SailfishOS." >&2
  exit 7
  ;;
esac
askyes >&2
echo >&2

logfile="/var/log/systemupdate_${upgrade_release}-from-${installed_release}_$(date +'%Ft%H-%M-%S').log-dupes.txt"
if ! touch "$logfile"
then
  echo "Aborting: Failed to create logfile!" >&2
  exit 5
fi

echo "Notice: For troubleshooting issues with the upgrade proper, please consult https://jolla.zendesk.com/hc/en-us/articles/360005795474" | tee -a "$logfile" >&2
echo | tee -a "$logfile" >&2

if ! set -o pipefail
then
  echo "Warning: Technically unable to abort, if one of the following, preparatory steps for the upgrade proper fails." | tee -a "$logfile" >&2
  echo | tee -a "$logfile" >&2
fi

emit_newline=""
for user_unit in \
  osupdate-check.timer osupdate-check.service \
  btrfsstatuschecker.service btrfschecker.timer btrfschecker.service beforebtrfscheckertimer.service \
  batterynotifierstatuschecker.service batterynotifier.timer batterynotifier.service \
  osmscout-server.socket osmscout-server.service
do
  if systemctl --user status "$user_unit" > /dev/null 2>&1
  then
    echo "- Stopping $user_unit" | tee -a "$logfile" >&2
    if ! systemctl --user stop "$user_unit" 2>&1 | tee -a "$logfile" >&2
    then
      echo -n "Notice: Failed to stop $user_unit (user)!  Continue?" | tee -a "$logfile" >&2
      askyes | tee -a "$logfile" >&2
    fi
    emit_newline="y"
  fi
done
for system_unit in \
  cron.service \
  btrfs-balancer.timer btrfs-balance.service \
  aliendalvik.service alien-settings.service alien-service-manager.service
do
  if systemctl status "$system_unit" > /dev/null 2>&1
  then
    echo "- Stopping $system_unit" | tee -a "$logfile" >&2
    if ! systemctl stop "$system_unit" 2>&1 | tee -a "$logfile" >&2
    then
      echo -n "Notice: Failed to stop $system_unit (system)!  Continue?" | tee -a "$logfile" >&2
      askyes | tee -a "$logfile" >&2
    fi
    emit_newline="y"
  fi
done
for process in store-client harbour-storema harbour-warehou harbour-osmscou pkcon zypper rpm
do
  if pgrep -x "$process" > /dev/null 2>&1
  then
    echo "- Stopping $process" | tee -a "$logfile" >&2
    if ! pkill -x "$process" 2>&1 | tee -a "$logfile" >&2
    then
      echo -n "Notice: Failed to stop $process (process)!  Continue?" | tee -a "$logfile" >&2
      askyes | tee -a "$logfile" >&2
    fi
    emit_newline="y"
  fi
done
if [ -n "$emit_newline" ]
then echo | tee -a "$logfile" >&2
fi

if [ -x /usr/share/harbour-themepacksupport/ocr.sh ]
then
  echo "- Disabling Theme Pack Support." | tee -a "$logfile" >&2
  if ! /usr/share/harbour-themepacksupport/ocr.sh 2>&1 | tee -a "$logfile" >&2
  then
    echo "Aborting: Failed to disable Theme Pack Support!" | tee -a "$logfile" >&2
    exit 6
  fi
  echo | tee -a "$logfile" >&2
fi

if command -v patchmanager > /dev/null 2>&1
then  # Unapply all Patchmanager-Patches, if Patchmanager 2.x is installed.
  if [ -d /var/lib/patchmanager/ausmt/patches/ ]
  then
    echo "- Unapplying all Patchmanager-Patches." | tee -a "$logfile" >&2
    if ! patchmanager --unapply-all >> "$logfile" 2>&1
    then
      echo "Aborting: Failed to unapply Patchmanager-Patches!" | tee -a "$logfile" >&2
      exit 6
    fi
    echo | tee -a "$logfile" >&2
    if [ -n "$(ls -A /var/lib/patchmanager/ausmt/patches/)" ]
    then
      echo "Unapply *all* Patchmanager-Patches before upgrading SailfishOS!" >&2
      exit 6
    fi
  fi
fi

# Simplified since v2.3, because ssu dr seems to *always* return "O.K.":
compar_o="$(compare_versions "$installed_release" "1.0.4.20")$(compare_versions "$upgrade_release" "1.0.4.20")"
case "$compar_o" in
[eg]?[eg]?)
  true
  ;;
l???|??l?)
  if openrepos_repos="$(ssu lr | fgrep 'openrepo')"
  then
    # References:
    # https://jolla.zendesk.com/hc/en-us/articles/201836347#5
    # https://together.jolla.com/question/38508/release-notes-software-version-10516-paarlampi/
    # https://together.jolla.com/question/33507/release-notes-software-version-10420-ohijarvi/
    echo "- Disabling OpenRepos' repositories (*grading from or to below 1.0.4.20):" | tee -a "$logfile" >&2
    for open_repo in $(echo "$openrepos_repos" | cut -s -f 3 -d ' ')
    do
      echo "$open_repo" | tee -a "$logfile" >&2
      ssu dr "$open_repo" 2>&1 | tee -a "$logfile" >&2
    done
    echo | tee -a "$logfile" >&2
  fi
  ;;
*)
  echo "Comparing versions in \"*grading from or to below SailfishOS 1.0.4.20\" check failed." >&2
  exit 7
  ;;
esac

if [ -n "$set_ssu" ]
then
  echo "- Setting SSU to SailfishOS release:" | tee -a "$logfile" >&2
  if ! ssu re "$upgrade_release" 2>&1 | tee -a "$logfile"
  then
    echo "Aborting: Failed to set SSU to release ${upgrade_release}!" | tee -a "$logfile" >&2
    exit 6
  fi
  echo | tee -a "$logfile" >&2
fi

echo "- Fetching and installing the SailfishOS upgrade from $installed_release to $upgrade_release (this may take a while):" | tee -a "$logfile" >&2
if ! version --dup 2>&1 | tee -a "$logfile"
then
  echo | tee -a "$logfile" >&2
  echo "Aborting: Failed to fetch or install the SailfishOS upgrade!" | tee -a "$logfile" >&2
  exit 6
fi

# Syncing, as I could not determine if both /usr/bin/rnd-dist-upgrade and /usr/bin/pkcon dist-upgrade (either of these two is called by version --dup) already do that:
sync

echo "Notice: After rebooting, do not miss to run post_$called" >&2
exit 0

