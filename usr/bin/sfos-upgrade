#/bin/sh
set -eufC

# Exit codes:
#   0  version --dup ran without aborting (this does not imply that upgrading was successful)
#   1  A check failed
#   2  Help called
#   3  Called with wrong parameters
#   4  Aborted upon user interaction
#   5  Error while interacting with the OS (reading / writing from file system, calling programs, etc.)
#  23  "Should never be reached" *) case #1
#  42  "Should never be reached" *) case #2

askyes ()
{
  echo -n " (Y/N) "
  read YN
  case "$YN" in
  y|Y)
    echo
    ;;
  *)
    echo "Aborted by user."
    exit 4
    ;;
  esac
}

CALLED=$(basename "$0")
OLDVERSION="$(version | rev | cut -f 2 -d ' ' | rev)"
if [ -z "$*" ]
then
  SETSSU="no"
  NEWVERSION="$(ssu re | rev | cut -f 1 -d ' ' | rev)"
else
  SETSSU="yes"
  NEWVERSION="$1"
  shift
  if [ -n "$*" ]
  then
    echo "No extra parameters expected, but set: $*"
    exit 3
  fi
  case "$NEWVERSION" in
  [1-9].[0-9].[0-9].[0-9]|[1-9].[0-9].[0-9].[0-9][0-9])
    true
    ;;
  -h|--help)
    echo "Usage: $CALLED [<version>]"
    echo "With a version number provided as parameter it sets SSU to this version and in release mode before upgrading.  This is the regular use case."
    echo "Without a version number it retrieves the one set for SSU to perform slightly relaxed checks, but does not alter SSU's settings for upgrading."
    exit 2
    ;;
  *)
    echo "Inorrect version format set: $NEWVERSION"
    exit 3
    ;;
  esac
fi

KNOWNSTOPVERSIONS="3.0.0.8\n2.2.0.29\n2.0.0.10\n1.1.9.30\n1.1.7.28\n1.1.2.16\n1.0.2.5"
# KNOWNSTOPVERSIONS="3.0.0.8\n2.2.0.29\n2.0.0.10\n1.1.9.30\n1.1.7.28\n1.1.2.16\n1.0.2.5\n1.0.0.5"
# v1.0.0.5 seems to be the oldest SFOS version ever deployed on real devices (on the "sbj" aka "Jolla 1 phone" aka "the first one"),
# i.e. outside of the SailfishOS-SDK.  Thus v1.0.0.5 may not a real "stop release" and even may not be downloadable as an upgrade.
STOPVERSIONS="$(curl -sS https://jolla.zendesk.com/hc/en-us/articles/201836347 | sed -n '/id="4"/,/id="5"/p' | sed -n '/<ul>/,/<\/ul>/p' | sed -n '/<li>/,/<\/li>/p' | cut -f 2- -d '>' | rev | cut -f 2- -d '<' | rev | cut -f 1 -d ' ' | tr -cd '0-9.\n')\n$KNOWNSTOPVERSIONS"
for i in $(echo -e "$STOPVERSIONS" | egrep '^[1-9]\.[0-9]\.[0-9]\.[0-9]$|^[1-9]\.[0-9]\.[0-9]\.[0-9][0-9]$' | sort -u)
do
  if expr "$OLDVERSION" "<" "$i" > /dev/null && expr "$NEWVERSION" ">" "$i" > /dev/null && true
  then
    echo "Trying to upgrade from $OLDVERSION to ${NEWVERSION}, which would \"jump over\" the stop release ${i}!"
    echo "Hence upgrading to $i instead."
    echo
    NEWVERSION="$i"
    break
  fi
done

if ! curl -sS https://coderus.openrepos.net/whitesoft/sailversion | cut -f 1 -d " " | grep -q "^$(echo $NEWVERSION | sed 's/\./\\\./g')\$"
then
  echo "$NEWVERSION is not a publicly released SailfishOS version number!"
  echo -n "Do you really want to continue?"
  askyes
fi

FREESPACE="$(df -k / | sed -n 2p | rev | grep '^/ ' | tr -s ' ' | cut -f 3 -d ' ' | rev)"
if [ "$FREESPACE" -lt "1000000" ]
then
  echo "Less than 1 GB ($FREESPACE KB) of free space on the root filesystem: aborting!"
  echo "Please clean up before retrying."
  exit 1
elif [ "$FREESPACE" -lt "1500000" ]
then
  echo "Less than 1,5 GB ($FREESPACE KB) of free space on the root filesystem!"
  echo "Please consider to abort and to clean up before retrying."
  echo
fi
if mount -t btrfs | cut -f 3 -d ' ' | grep -q '^/$'
then
  BTRFSTEST="KO"
  if which btrfs-balancer > /dev/null
  then
    BTRFSALLOC="$(btrfs-balancer allocation / | tr -s ' ')"
    ALLOCATION=$(echo "$BTRFSALLOC" | grep '^Allocated: ' | cut -f 2 -d ' ')
    if [ "$ALLOCATION" -ge "90" ]
    then
      echo "Allocation (${ALLOCATION}%) of the root filesystem (BTRFS) is 90% or more: aborting!"
      echo "Please perform a btrfs-balancer run before retrying."
      exit 1
    elif [ "$ALLOCATION" -ge "85" ]
    then
      echo "Allocation (${ALLOCATION}%) of the root filesystem (BTRFS) is 85% or more!"
      echo "Please consider to abort and to perform a btrfs-balancer run before retrying."
      echo
    fi
    BTRFSTOTAL=$(echo "$BTRFSALLOC" | grep '^Total: ' | cut -f 2 -d ' ')
    BTRFSUSED=$(echo "$BTRFSALLOC" | grep '^Used: ' | cut -f 2 -d ' ')
    if UNALLOCSPC=$(expr "$BTRFSTOTAL" "-" "$BTRFSUSED")
    then
      BTRFSTEST="ok"
      if [ "$UNALLOCSPC" -lt "1500000000" ]
      then
        echo "Less than 1,5 GiB unallocated space ($UNALLOCSPC Bytes) on the root filesystem (BTRFS): aborting!"
        echo "Please perform a btrfs-balancer run before retrying."
        exit 1
      elif [ "$UNALLOCSPC" -lt "2000000000" ]
      then
        echo "Less than 2 GiB unallocated space ($UNALLOCSPC Bytes) on the root filesystem (BTRFS)!"
        echo "Please consider to abort and to perform a btrfs-balancer run before retrying."
        echo
      fi
    fi
  elif which btrfs > /dev/null
  then
    BTRFSALLOC="$(btrfs filesystem df / | grep '^Data, ' | cut -f 2 -d ':' | tr ',' '\n' | tr -d ' ' | rev | grep '^Bi*G[0-9][0-9]\.[0-9][0-9]*=' | sed 's/^Bi*G//g' | tr -d '.' | rev)"
    BTRFSTOTAL=$(echo "$BTRFSALLOC" | grep '^total=' | cut -f 2 -d '=')
    BTRFSUSED=$(echo "$BTRFSALLOC" | grep '^used=' | cut -f 2 -d '=')
    if UNALLOCSPC=$(expr "$BTRFSTOTAL" "-" "$BTRFSUSED")
    then
      BTRFSTEST="ok"
      if [ "$UNALLOCSPC" -lt "200" ]
      then
        echo "Less than 2 GiB unallocated data space ($(echo $UNALLOCSPC | rev | cut -c 3- | rev),$(echo $UNALLOCSPC | rev | cut -c 1-2 | rev) GiB) on the root filesystem (BTRFS): aborting!"
        echo "Please perform a btrfs-balancer run before retrying."
        exit 1
      elif [ "$UNALLOCSPC" -lt "250" ]
      then
        echo "Less than 2,5 GiB unallocated data space ($(echo $UNALLOCSPC | rev | cut -c 3- | rev),$(echo $UNALLOCSPC | rev | cut -c 1-2 | rev) GiB) on the root filesystem (BTRFS)!"
        echo "Please consider to abort and to perform a btrfs-balancer run before retrying."
        echo
      fi
    fi
  fi
  if [ "$BTRFSTEST" != "ok" ]
  then
    echo "Cannot properly determine allocation of the root filesystem (BTRFS): aborting."
    exit 5
  fi
fi

POWER_SUPPLY_STATUS=""
POWER_SUPPLY_CAPACITY=""
POWER_SUPPLY_CHARGE_NOW=""
POWER_SUPPLY_CHARGE_FULL=""
POWER_SUPPLY_CHARGE_FULL_DESIGN=""
if . /sys/class/power_supply/battery/uevent
then
  case "${POWER_SUPPLY_CHARGE_FULL_DESIGN}-${POWER_SUPPLY_CHARGE_NOW}-${POWER_SUPPLY_CHARGE_FULL}-$POWER_SUPPLY_CAPACITY" in
  [1-9][0-9][0-9]*-[0-9]*-*-*)
    BATCAPDSN=$(expr "${POWER_SUPPLY_CHARGE_NOW}00" "/" "$POWER_SUPPLY_CHARGE_FULL_DESIGN" 2> /dev/null)
    ;;
  [1-9][0-9][0-9]*-*-[1-9][0-9]*-[0-9]*)
    BATCRGNOW=$(expr "$POWER_SUPPLY_CHARGE_FULL" "*" "$POWER_SUPPLY_CAPACITY" 2> /dev/null)
    BATCAPDSN=$(expr "$BATCRGNOW" "/" "$POWER_SUPPLY_CHARGE_FULL_DESIGN" 2> /dev/null)
    ;;
  *)
    BATCAPDSN=""
    ;;
  esac
else
  echo "Failed to read battery information: aborting."
  exit 5
fi
BATTEST="KO"
case "${POWER_SUPPLY_STATUS}-${BATCAPDSN}-$POWER_SUPPLY_CAPACITY" in
Charging-[0-9]*-*)
  if [ "$BATCAPDSN" -le "18" ]
  then
    echo "Battery is charged less than 18,5% (${BATCAPDSN}%) of its original design capacity!"
    echo -n "Continue charging before "
    if ! [ "$SETSSU" != "no" ]
    then BATTEST="ask"
    fi
  else
    BATTEST="ok"
    if [ "$BATCAPDSN" -le "25" ]
    then
      echo "Battery is charged 25% or less (${BATCAPDSN}%) of its original design capacity."
      echo "Please continue charging throughout the upgrade process!"
      echo
    fi
  fi
  ;;
Discharging-[0-9]*-*)
  if [ "$BATCAPDSN" -le "25" ]
  then
    echo "Battery is charged 25% or less (${BATCAPDSN}%) of its original design capacity!"
    echo -n "Plug in a charger before "
  else
    BATTEST="ok"
    if [ "$BATCAPDSN" -le "37" ]
    then
      echo "Battery is charged less than 37,5% (${BATCAPDSN}%) of its original design capacity."
      echo "Please plug in a charger before continuing."
      echo
    fi
  fi
  ;;
Charging-*-[0-9]*)
  if [ "$POWER_SUPPLY_CAPACITY" -le "25" ]
  then
    echo "Battery is charged 25% or less (${POWER_SUPPLY_CAPACITY}%) of its capacity!"
    echo -n "Continue charging before "
    if ! [ "$SETSSU" != "no" ]
    then BATTEST="ask"
    fi
  else
    BATTEST="ok"
    if [ "$POWER_SUPPLY_CAPACITY" -le "33" ]
    then
      echo "Battery is charged less than 33,3% (${POWER_SUPPLY_CAPACITY}%) of its capacity."
      echo "Please continue charging throughout the upgrade process!"
      echo
    fi
  fi
  ;;
Discharging-*-[0-9]*)
  if [ "$POWER_SUPPLY_CAPACITY" -le "33" ]
  then
    echo "Battery is charged less than 33,3% (${POWER_SUPPLY_CAPACITY}%) of its capacity!"
    echo -n "Plug in a charger before "
  else
    BATTEST="ok"
    if [ "$POWER_SUPPLY_CAPACITY" -le "50" ]
    then
      echo "Battery is charged 50% or less (${POWER_SUPPLY_CAPACITY}%) of its capacity."
      echo "Please plug in a charger before continuing."
      echo
    fi
  fi
  ;;
?*harging-*-*)
  echo "Failed to determine battery charge!"
  echo "Check your device before "
  if ! [ "$SETSSU" != "no" ]
  then BATTEST="ask"
  fi
  ;;
*-*-*)
  echo "Failed to determine battery charging state!"
  echo "Check your device before "
  if ! [ "$SETSSU" != "no" ]
  then BATTEST="ask"
  fi
  ;;
*)
  exit 42
  ;;
esac
case "$BATTEST" in
KO)
  echo "retrying: aborting."
  exit 1
  ;;
ask)
  echo "upgrading."
  echo "When a power loss occurs during the upgrade process, it will fail."
  echo -n "Do you really want to continue?"
  askyes
  ;;
ok)
  true
  ;;
*)
  exit 23
  ;;
esac

if ! [ "$(uptime | cut -f 1 -d ',' | rev | grep '^nim ' | cut -f 2 -d ' ' | rev)" -lt "3" ] 2> /dev/null
then
  echo "Mind that $CALLED is best run on a freshly rebooted device."
  echo
fi

if expr "$OLDVERSION" ">" "$NEWVERSION" > /dev/null
then
  echo "About to DOWNGRADE SailfishOS from $OLDVERSION to $NEWVERSION!"
  echo -n "Do you really want to do that?"
else
  echo -n "Do you want to upgrade SailfishOS from $OLDVERSION to $NEWVERSION?"
fi
askyes

LOGFILE="/var/log/systemupdate_${NEWVERSION}-from-${OLDVERSION}_$(date +'%F_%H-%M-%S').log-dupes.txt"
touch "$LOGFILE" || exit 5

echo "For troubleshooting, please consult https://jolla.zendesk.com/hc/en-us/articles/360005795474" | tee -a "$LOGFILE"
echo | tee -a "$LOGFILE"

if [ -x /usr/share/harbour-themepacksupport/ocr.sh ]
then
  echo "- Disabling Theme Pack Support." | tee -a "$LOGFILE"
  /usr/share/harbour-themepacksupport/ocr.sh 2>&1 | tee -a "$LOGFILE"
  echo | tee -a "$LOGFILE"
fi

if which patchmanager > /dev/null
then
  echo "- Unapplying all Patchmanager-Patches." | tee -a "$LOGFILE"
  patchmanager --unapply-all 2>&1 >> "$LOGFILE"
  echo | tee -a "$LOGFILE"
fi

if expr "$OLDVERSION" "<" "1.0.4.20" > /dev/null
then
  echo "- Disabling OpenRepos\' repositories:" | tee -a "$LOGFILE"
  for i in $(ssu lr | fgrep 'openrepo' | cut -f 3 -d ' ')
  do
    echo "$i" | tee -a "$LOGFILE"
    ssu dr "$i" 2>&1 | tee -a "$LOGFILE"
  done
  echo | tee -a "$LOGFILE"
fi

if [ "$SETSSU" != "no" ]
then
  echo "- Setting SSU version for SailfishOS:" | tee -a "$LOGFILE"
  ssu re $NEWVERSION 2>&1 | tee -a "$LOGFILE"
  echo | tee -a "$LOGFILE"
fi

echo "- Fetching and installing SailfishOS upgrade from $OLDVERSION to $NEWVERSION (this may take a while):" | tee -a "$LOGFILE"
version --dup 2>&1 | tee -a "$LOGFILE"

echo "After rebooting, do not miss to run post_$CALLED"
exit 0

